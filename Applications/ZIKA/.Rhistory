first = T
first.growth = T
first.intro = T
for (i in seq(1,length(mrsi$filename))){
time_diff = mrsi[i,"date"]-end_time
time = seq(0,as.numeric(time_diff),2)
# read in the log file
t = read.table(paste(path,'/simout/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
# take a 10% burnin
t = t[-seq(1,length(t$posterior)/5),]
ess = effectiveSize(as.mcmc(t$posterior))
if (ess[[1]]>100){
if (!startsWith( as.character(mrsi[i,"filename"]),"simmultibd")){
# read in all the Ne's
for (j in seq(1,length(time))){
method = strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[2]]
timeframe = as.numeric(strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[3]])
name = paste('Ne',j,sep="")
hpdInt = HPDinterval(exp(as.mcmc(t[,name])))
hpdInt.m = HPDinterval(exp(as.mcmc(t[,name])), prob=0.5)
new.dat = data.frame(time=mrsi[i,"date"]-time[j],
Ne.mean=median(exp(t[,name])), Ne.lower=hpdInt[1,'lower'], Ne.upper=hpdInt[1,'upper'],
Ne.ll=hpdInt.m[1,'lower'], Ne.uu=hpdInt.m[1,'upper'],
method = method, timeframe=timeframe)
if (first){
dat = new.dat
first = F
}else{
dat = rbind(dat, new.dat)
}
}
# get all the growth rates
average_over = 1
for (j in seq(1,length(time)-average_over,1)){
method = strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[2]]
timeframe = as.numeric(strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[3]])
name1 = paste('Ne',j,sep="")
name2 = paste('Ne',j+average_over,sep="")
values = (t[,name1]-t[,name2])/(time[j+average_over]-time[j])*365
doubling = log(2)/values
R = 1+values/becoming_uninf
R[which(R<=0)] = 0
hpdInt = HPDinterval(as.mcmc(values))
hpdInt.5 = HPDinterval(as.mcmc(values), prob=0.5)
hpdInt.doubling = HPDinterval(as.mcmc(doubling))
hpdInt.R = HPDinterval(as.mcmc(R))
hpdInt.R.5 = HPDinterval(as.mcmc(R), prob=0.5)
# get the percentage of intros
name.intro = paste('immigrationRate',floor((j-1)/7)+1,sep="")
values.intro = exp(t[,name.intro])
# get the approximate transmission rate from the growth rate
transmission = values + becoming_uninf
# assume that the minimal R0 is .5
transmission[which(transmission<becoming_uninf/2)] = becoming_uninf/2
# get the ratio of intros
ratio.intro = exp(t[,name.intro])/(exp(t[,name.intro]) + transmission)
hpd.intro = HPDinterval(as.mcmc(ratio.intro))
hpd.intro.5 = HPDinterval(as.mcmc(ratio.intro), prob=0.5)
new.dat = data.frame(time=mrsi[i,"date"]-time[j],
growth.mean=median(values), growth.lower=hpdInt[1,'lower'], growth.upper=hpdInt[1,'upper'],
growth.ll=hpdInt.5[1,'lower'], growth.uu=hpdInt.5[1,'upper'],
doubling.mean=median(doubling), doubling.lower=hpdInt.doubling[1,'lower'], doubling.upper=hpdInt.doubling[1,'upper'],
R.lower=hpdInt.R[1,'lower'], R.upper=hpdInt.R[1,'upper'],
R.ll=hpdInt.R.5[1,'lower'], R.uu=hpdInt.R.5[1,'upper'],
intro.l=hpd.intro[1,'lower'], intro.u=hpd.intro[1,'upper'],
intro.ll=hpd.intro.5[1,'lower'], intro.uu=hpd.intro.5[1,'upper'],
method = method, timeframe=timeframe)
new.dat = rbind(new.dat, data.frame(time=mrsi[i,"date"]-time[j+1] +0.01,
growth.mean=median(values), growth.lower=hpdInt[1,'lower'], growth.upper=hpdInt[1,'upper'],
growth.ll=hpdInt.5[1,'lower'], growth.uu=hpdInt.5[1,'upper'],
doubling.mean=median(doubling), doubling.lower=hpdInt.doubling[1,'lower'], doubling.upper=hpdInt.doubling[1,'upper'],
R.lower=hpdInt.R[1,'lower'], R.upper=hpdInt.R[1,'upper'],
R.ll=hpdInt.R.5[1,'lower'], R.uu=hpdInt.R.5[1,'upper'],
intro.l=hpd.intro[1,'lower'], intro.u=hpd.intro[1,'upper'],
intro.ll=hpd.intro.5[1,'lower'], intro.uu=hpd.intro.5[1,'upper'],
method = method, timeframe=timeframe))
if (first.growth){
growth = new.dat
first.growth = F
}else{
growth = rbind(growth, new.dat)
}
}
}
}else{
print("ess limit not reached")
print(ess)
}
}
levels(dat$method) <- c("correlated Ne's", "uncorrelated Ne's", "correlated Ne trajectories")
dat$method <- factor(dat$method, levels =c("correlated Ne's", "correlated Ne trajectories", "uncorrelated Ne's"))
levels(growth$method) <- c("correlated Ne's", "uncorrelated Ne's", "correlated Ne trajectories")
growth$method <- factor(growth$method, levels =c("correlated Ne's", "correlated Ne trajectories", "uncorrelated Ne's"))
# read in the mrsi file
first = T
for (i in seq(1,length(mrsi$filename))){
time_diff = mrsi[i,"date"]-end_time
time = seq(0,as.numeric(time_diff),2)
if (startsWith( as.character(mrsi[i,"filename"]),"simmultibd")){
# read in the log file
t = read.table(paste(path,'/simout/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
# take a 10% burnin
t = t[-seq(1,length(t$posterior)/10),]
# read in all the Ne's
for (j in seq(1,length(time))){
method = strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[2]]
timeframe = as.numeric(strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[3]])
name = paste('logReproductiveNumber',length(time)-j+1,sep="")
# name2 = paste('samplingProportion',length(time)-j+1,sep="")
hpdInt = HPDinterval(exp(as.mcmc(t[,name])))
hpdInt.5 = HPDinterval(exp(as.mcmc(t[,name])),prob=0.5)
# hpdInt.samp = HPDinterval(as.mcmc(t[,name2]))
hpdInt.growth = HPDinterval(as.mcmc((exp(t[,name])-1)*becoming_uninf))
hpdInt.growth.5 = HPDinterval(as.mcmc((exp(t[,name])-1)*becoming_uninf),prob=0.5)
new.dat = data.frame(time=mrsi[i,"date"]-time[j],
Ne.mean=median(t[,name]), Ne.lower=hpdInt[1,'lower'], Ne.upper=hpdInt[1,'upper'],
Ne.ll=hpdInt.5[1,'lower'], Ne.uu=hpdInt.5[1,'upper'],
# samp.mean=median(t[,name2]), samp.lower=hpdInt.samp[1,'lower'], samp.upper=hpdInt.samp[1,'upper'],
growth.lower=hpdInt.growth[1,'lower'], growth.upper=hpdInt.growth[1,'upper'],
growth.ll=hpdInt.growth.5[1,'lower'], growth.uu=hpdInt.growth.5[1,'upper'],
method = method, timeframe=timeframe)
new.dat = rbind(new.dat, data.frame(time=mrsi[i,"date"]-time[j]-2+0.001,
Ne.mean=median(t[,name]), Ne.lower=hpdInt[1,'lower'], Ne.upper=hpdInt[1,'upper'],
Ne.ll=hpdInt.5[1,'lower'], Ne.uu=hpdInt.5[1,'upper'],
# samp.mean=median(t[,name2]), samp.lower=hpdInt.samp[1,'lower'], samp.upper=hpdInt.samp[1,'upper'],
growth.lower=hpdInt.growth[1,'lower'], growth.upper=hpdInt.growth[1,'upper'],
growth.ll=hpdInt.growth.5[1,'lower'], growth.uu=hpdInt.growth.5[1,'upper'],
method = method, timeframe=timeframe))
if (first){
dat.bdsky = new.dat
first = F
}else{
dat.bdsky = rbind(dat.bdsky, new.dat)
}
}
}
}
p_coal_growth_supp = ggplot(growth) +
geom_path(aes(x=time, y=growth.mean, color=timeframe)) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill=timeframe), alpha=0.2) +
# geom_path(data=growth.testing, aes(x=time, y=growth, color="testing")) +
facet_wrap(method~., ncol=1) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$ date)))  +
coord_cartesian(ylim=c(-150,300))+
scale_color_OkabeIto()+
scale_fill_OkabeIto()+
theme_minimal()
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth_supp <- p_coal_growth_supp + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days"))
# ggsave(plot=p_coal_growth_supp, file=paste(path, 'figures/coal_growth_supp.pdf', sep='/'), height=5,width=9)
p_coal_growth = ggplot(growth) +
# geom_line(aes(x=time, y=growth.mean, color="genetic data")) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="coalescent skyline"), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="coalescent skyline"), alpha=0.8) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="birth-death skyline"), alpha=0.2) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="birth-death skyline"), alpha=0.8) +
geom_path(data=growth.testing, aes(x=time, y=growth, color="confirmed positive tests")) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
coord_cartesian(ylim=c(-100,300))+
scale_color_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
scale_fill_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
xlab("")+
theme_minimal() +
facet_wrap(.~timeframe, ncol=3)
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth <- p_coal_growth + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days")) + ylab("growth rate per year")
plot(p_coal_growth)
ggsave(plot=p_coal_growth, file=paste(path, 'figures/sims_growth.png', sep='/'), height=9,width=15)
# p_coal_growth = ggplot(growth) +
#   geom_line(aes(x=time, y=growth.mean, group=timeframe))+
#   geom_line(data=growth.testing, aes(x=time, y=growth, group=timeframe, color=
#                   "red"))+
#
#   scale_x_date()  +
#
#   xlab("")+
#   theme_minimal()
# plot(p_coal_growth)
p_coal_growth_supp = ggplot(growth) +
geom_path(aes(x=time, y=growth.mean, color=timeframe)) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill=timeframe), alpha=0.2) +
# geom_path(data=growth.testing, aes(x=time, y=growth, color="testing")) +
facet_wrap(method~., ncol=1) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$ date)))  +
coord_cartesian(ylim=c(-150,300))+
scale_color_OkabeIto()+
scale_fill_OkabeIto()+
theme_minimal()
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth_supp <- p_coal_growth_supp + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days"))
# ggsave(plot=p_coal_growth_supp, file=paste(path, 'figures/coal_growth_supp.pdf', sep='/'), height=5,width=9)
p_coal_growth = ggplot(growth) +
# geom_line(aes(x=time, y=growth.mean, color="genetic data")) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="coalescent skyline"), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="coalescent skyline"), alpha=0.8) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="birth-death skyline"), alpha=0.2) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="birth-death skyline"), alpha=0.8) +
geom_path(data=growth.testing, aes(x=time, y=growth, color="confirmed positive tests")) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
coord_cartesian(ylim=c(-100,300))+
scale_color_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
scale_fill_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
xlab("")+
theme_minimal() +
facet_wrap(.~timeframe, ncol=3)
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth <- p_coal_growth + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days")) + ylab("growth rate per year")
plot(p_coal_growth)
ggsave(plot=p_coal_growth, file=paste(path, 'figures/sims_growth.png', sep='/'), height=9,width=15)
# p_coal_growth = ggplot(growth) +
#   geom_line(aes(x=time, y=growth.mean, group=timeframe))+
#   geom_line(data=growth.testing, aes(x=time, y=growth, group=timeframe, color=
#                   "red"))+
#
#   scale_x_date()  +
#
#   xlab("")+
#   theme_minimal()
# plot(p_coal_growth)
true_vals = data.frame(R0=c(2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.39, 2.28, 2.17, 2.06, 1.94, 1.83, 1.72, 1.61, 1.50, 1.39, 1.28, 1.17, 1.06, 0.94, 0.83, 0.72, 0.61, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00))
true_vals$times = as.Date('2020-02-06') + seq(1,length(true_vals$R0)*2,2)
p_R0 = ggplot(growth) +
geom_ribbon(aes(x=time, ymin=R.lower, ymax=R.upper, fill="coalesent skyline"), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=R.ll, ymax=R.uu, fill="coalesent skyline"), alpha=0.8) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill="birth-death skyline"), alpha=0.2)+
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill="birth-death skyline"), alpha=0.8)+
geom_line(data=true_vals, aes(x=times, y=R0, color="simulated values"))+
ylab("Effective Reproduction Number")+
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
# coord_cartesian(ylim=c(0,7.5))+
# geom_vline(xintercept=as.Date('2020-03-05'))+
# geom_vline(xintercept=as.Date('2020-03-13'))+
# geom_vline(xintercept=as.Date('2020-03-23'))+
scale_color_manual(name="inference using:", values = c("simulated values"=test_col, "birth-death skyline"=bdsky_col, "coalesent skyline"=coal_col))+
scale_fill_manual(name="inference using:", values = c("simulated values"=test_col, "birth-death skyline"=bdsky_col, "coalesent skyline"=coal_col))+
theme_minimal() +
facet_wrap(.~timeframe, ncol=3)
plot(p_R0)
ggsave(plot=p_R0, file=paste(path, 'figures/sims_R0.png', sep='/'), height=9,width=15)
average_over = 1
for (rep in seq(0,8)){
intro_vals = introductions[which(introductions$timeframe==rep), ]
intro_vals$t = floor(intro_vals$t*366)
t.vals = unique(intro_vals$t)
for (i in seq(1,length(t.vals)-average_over)){
values = intro_vals[which(intro_vals$t>=t.vals[[i]] & intro_vals$t<t.vals[[i+average_over]]), "val"]
m = mean(values)
std = sd(values)
new.smooth_intro = data.frame(t=t.vals[[i]]+average_over/2 + end_time, y=m, err=std, timeframe=rep)
if (rep==0 && i==1){
smooth_intro = new.smooth_intro
}else{
smooth_intro = rbind(smooth_intro, new.smooth_intro)
}
}
}
g.perc_intros = ggplot(growth) +
geom_ribbon(aes(x=time, ymin=intro.l, ymax=intro.u), alpha=0.2, fill=coal_col)+
geom_ribbon(aes(x=time, ymin=intro.ll, ymax=intro.uu), alpha=0.8, fill=coal_col)+
geom_line(data=smooth_intro, aes(x=t,y=y))+
geom_ribbon(data=smooth_intro, aes(x=t,ymin=y-err,ymax=y+err))+
theme_minimal()+
scale_y_log10()+
scale_x_date()+
coord_cartesian(ylim = c(0.001, 1))+
ylab("Proportion of cases due to introductions") +
xlab("") +
facet_wrap(.~timeframe, ncol=3)
plot(g.perc_intros)
ggsave(plot=g.perc_intros, file=paste(path, 'figures/sim_intro_percentage.png', sep='/'), height=4,width=7)
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
install.packages("phangorn", dependencies=TRUE)
library(phangorn)    # load the phangorn library
read.nexus.networx
source('~/Documents/github/Kemri_H1N1/plotBDSKY.R', echo=TRUE)
source('~/Documents/github/Recombination-Material/Applications/combineRuns.R', echo=TRUE)
# get the names of all output files of the first replicate
trees <- list.files(path="./combined/", pattern=paste("*.pruned", sep=""), full.names = TRUE)
for (i in seq(1, length(trees))){
if (!grepl("simulated", trees[[i]])){
if (grepl("sars-like_all", trees[[i]])){
system(paste("java -jar ../Software/RecombinationSummarizer.jar -burnin 0 -positions NONE", trees[i], gsub("*.pruned", ".tree", trees[i]), sep=" "))
# system(paste("java -jar ../Software/RecombinationSummarizer.jar -burnin 0 -useEveryTree 10 ", trees[i], gsub("*.pruned", ".loci.tree", trees[i]), sep=" "))
}else{
system(paste("java -jar ../Software/RecombinationSummarizer.jar -burnin 0 ", trees[i], gsub("*.pruned", ".tree", trees[i]), sep=" "))
}
}
}
# # get the names of all output files of the first replicate
trees <- list.files(path="./combined/", pattern=paste("*.pruned", sep=""), full.names = TRUE)
for (i in seq(1, length(trees))){
system(paste("java -jar ../Software/RateAfterRecombination.jar", trees[i], gsub("*.pruned", ".recrate", trees[i]), sep=" "))
system(paste("java -jar ../Software/RateAfterRecombination.jar", gsub("*.pruned", ".simulated", trees[i]), gsub("*.pruned", ".simrecrate", trees[i]), sep=" "))
}
# # get the names of all output files of the first replicate
# trees <- list.files(path="./combined/", pattern=paste("*pruned.trees", sep=""), full.names = TRUE)
# for (i in seq(1, length(trees))){
#   system(paste("java -jar ../Software/RecombinationDistance.jar -burnin 0", trees[i], gsub("*.trees", ".distance.txt", trees[i]), sep=" "))
# }
# get the names of all output files of the first replicate
trees <- list.files(path="./combined/", pattern=paste("*.trees", sep=""), full.names = TRUE)
for (i in seq(5, length(trees))){
if (!grepl("simulated", trees[[i]])){
system(paste("java -jar ../Software/CommonAncestorHeights.jar -burnin 0 -rootOnly true", trees[i], gsub("*.trees", ".root.tsv", trees[i]), sep=" "))
if (grepl("sars-like", trees[[i]])){
system(paste("java -jar ../Software/CommonAncestorHeights.jar -burnin 0 -sequence Wuhan-Hu-1\\/2019\\|2019", trees[i], gsub("*.trees", ".wuhan.tsv", trees[i]), sep=" "))
}
}
}
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Unstructured/plotComparison.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
length(t)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
labels(t)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
labels(t)strsplit(labels(t)[[2]][[i]], split="_")[[1]][[2]]
strsplit(labels(t)[[2]][[i]], split="_")[[1]][[2]]
loc = strsplit(strsplit(labels(t)[[2]][[i]], split="_")[[1]][[2]], split="\\.")
loc
loc = strsplit(strsplit(labels(t)[[2]][[i]], split="_")[[1]][[2]], split="\\.")[[1]]
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
exp(t[, i])
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
labels(t)[[2]][[i]]
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
p_ne1 <- ggplot(dat) +
geom_ribbon(aes(xtime, ymin=l.5,ymax=u.5, fill=location), alpha=0.1) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_y_log10(limits=c(0.5,120)) +
xlab("")+
theme(legend.position = "none")
plot(p_ne1)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.1) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_y_log10(limits=c(0.5,120)) +
xlab("")+
theme(legend.position = "none")
plot(p_ne)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.1) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
timestart
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.25) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(location, ncol=1)
xlab("")+
theme(legend.position = "none")
plot(p_ne)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.25) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(location, ncol=1)+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.25) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(.~location, ncol=1)+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.25) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(.~location, ncol=2)+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.5) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(.~location, ncol=2)+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.5) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(.~location, ncol=2, scales="free_y")+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
read.beast("./out/skygrid.tree")
tree = read.beast("./out/zikv_skygrid.tree")
tree = read.beast("./out/zikv_skygrid.tree")
ggplot(tree) + geom_tree() + theme_tree()
View(tree)
tree$data
tree
tree@data
labels(tree@data)
length(tree@data$Brazil_North)
tree@data$location = c()
for (i in seq(1,length(tree@data$Brazil_North))){
prob_vals = c()
for (j in seq(1,length(locations))){
prob_vals[[j]] = tree@data[i, locations[[j]]]
}
}
locations = c("Polynesia", "SouthAmerica", "CentralAmerica", "Caribbean", "Brazil_North", "Brazil_Northeast", "Brazil_Southeast")
for (i in seq(1,length(tree@data$Brazil_North))){
prob_vals = c()
for (j in seq(1,length(locations))){
prob_vals[[j]] = tree@data[i, locations[[j]]]
}
}
prob_vals
prob_vals = c()
for (j in seq(1,length(locations))){
prob_vals[[j]] = as.numeric(tree@data[i, locations[[j]]])
}
prob_vals
which.max(prob_vals)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
which.max(prob_vals)ggtree(tree, aes(color=location)) + geom_tree() + theme_tree()
ggtree(tree, aes(color=location)) + geom_tree() + theme_tree()
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree()
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree() +
scale_color_OkabeIto()
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=0.5) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(.~location, ncol=2, scales="free_y")+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree() +
scale_color_OkabeIto()
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree() +
scale_color_OkabeIto() + theme(legend.position = "left")
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree() +
scale_color_OkabeIto() + theme(legend.position = "left") + coord_flip()
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree() +
scale_color_OkabeIto() + theme(legend.position = "left") + coord_flip() + scale_y_reverse()
ggtree(tree, aes(color=location, alpha=entropy)) + geom_tree() + theme_tree() +
scale_color_OkabeIto() + theme(legend.position = "left") + coord_flip() + scale_x_reverse()
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
p_ne <- ggplot(dat) +
geom_ribbon(aes(x=time, ymin=l.95,ymax=u.95, fill=location), alpha=0.25) +
geom_ribbon(aes(x=time, ymin=l.5,ymax=u.5, fill=location), alpha=1) +
theme_minimal()+
scale_color_OkabeIto(breaks=c("state0","state1"))+
scale_fill_OkabeIto()+
scale_x_date()+
facet_wrap(.~location, ncol=3, scales="free_y")+
xlab("")+
theme(legend.position = "none")
plot(p_ne)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Applications/ZIKA/plotNe.R', echo=TRUE)
