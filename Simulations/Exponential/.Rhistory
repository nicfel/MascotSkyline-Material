# for all entries in is_SFS, fill the distance matrix
for (a in seq(1, length(is_SFS)-1)){
if (is_SFS[[a]]){
for (b in seq(a+1, length(is_SFS))){
if (is_SFS[[b]]){
distances[cluster_tips[[a]], cluster_tips[[b]]] = phylo_distances[a,b]
distances[cluster_tips[[b]], cluster_tips[[a]]] = phylo_distances[b,a]
}
}
}
}
}
View(phylo_distances)
trees[[1]]$edge.length
trees[[1]]$edge
trees[[i]]$tip.label[[j]]
trees[[i]]$tip.label[[10]]
# for each of the individuals, compute how long the branch is above it
trees = trees_h3n2
# compute pairwise distance
for (i in seq(1,length(trees))){
# check which tips of the SFS they match to
for (j in seq(1, length(trees[[i]]$tip.label))){
if(is.element(trees[[i]]$tip.label[[j]], SFS_metadata$strain)){
ind = which(trees[[i]]$tip.label[[j]]==SFS_metadata$strain)
# get the edge with that edge
print(trees[[i]]$edge.length[[which(trees[[i]]$edge[,2]==j)]])
}
}
# get the pairwise distance between elements in the cluster
phylo_distances = ape::cophenetic.phylo(trees[[i]])
# get the tips in the current cluster
cluster_tips = colnames(phylo_distances)
# keeps track of which strains are in the SFS
is_SFS = logical()
# for all entries in is_SFS, fill the distance matrix
for (a in seq(1, length(is_SFS)-1)){
if (is_SFS[[a]]){
for (b in seq(a+1, length(is_SFS))){
if (is_SFS[[b]]){
distances[cluster_tips[[a]], cluster_tips[[b]]] = phylo_distances[a,b]
distances[cluster_tips[[b]], cluster_tips[[a]]] = phylo_distances[b,a]
}
}
}
}
}
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
trees = trees_h3n2
# compute pairwise distance
for (i in seq(1,length(trees))){
# check which tips of the SFS they match to
for (j in seq(1, length(trees[[i]]$tip.label))){
if(is.element(trees[[i]]$tip.label[[j]], SFS_metadata$strain)){
ind = which(trees[[i]]$tip.label[[j]]==SFS_metadata$strain)
# get the edge with that edge
SFS_metadata[ind,"edgelength"] =(trees[[i]]$edge.length[[which(trees[[i]]$edge[,2]==j)]])
}
}
}
View(SFS_metadata)
SFS_metadata[,"edgelength"]
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2 SFS_metadata)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) +geom_histogram(aes(x=edgelength, color=subtype), stat="count")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) +geom_histogram(aes(x=edgelength, color=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) +geom_density(aes(x=edgelength, color=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) + geom_histogramm(aes(x=edgelength, group=subtype, fill=subtype), stat="count")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, group=subtype, fill=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),binomval] = 1
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=0.0001),"binomval"] = 0
getBinomReg(SFS_metadata, age_group)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=0.0001),"binomval"] = 0
getBinomReg(SFS_metadata, age_group)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=0.0001),"binomval"] = 0
getBinomReg(SFS_metadata, age_group)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=0.0001),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=0.0001),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0001
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0002
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0003
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0004
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0005
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0006
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0007
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0008
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0002
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0003
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0004
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotSkygrid.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R")
data
tot.ne = data[data$name=="NeNull","lower"]<data[data$name=="NeNull","true"] &
data[data$name=="NeNull","upper"]>data[data$name=="NeNull","true"]
tot.ne
cov.ne = sum(tot.ne[!is.na(tot.ne)])/sum(!is.na(tot.ne))
cov.ne
tot.growth = data[data$name=="GrowthRate","lower"]<data[data$name=="GrowthRate","true"] &
data[data$name=="GrowthRate","upper"]>data[data$name=="GrowthRate","true"]
cov.growth = sum(tot.growth[!is.na(tot.growth)])/sum(!is.na(tot.growth))
cov.growth
tot.growth
p_growth <- ggplot(data[data$name=="GrowthRate",]) +
geom_point(aes(x=true, y=-median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=-lower, ymax=-upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("growth rate") + theme_minimal()+
theme(legend.position="none")
plot(p_growth)
data
tot.growth
tot.growth = data[data$name=="GrowthRate","lower"]<-data[data$name=="GrowthRate","true"] &
data[data$name=="GrowthRate","upper"]>-data[data$name=="GrowthRate","true"]
cov.growth = sum(tot.growth[!is.na(tot.growth)])/sum(!is.na(tot.growth))
cov.growth
tot.mig = data[data$name=="f_migrationRatesSkyline","lower"]<data[data$name=="f_migrationRatesSkyline","true"] &
data[data$name=="f_migrationRatesSkyline","upper"]>data[data$name=="f_migrationRatesSkyline","true"]
cov.mig = sum(tot.mig[!is.na(tot.mig)])/sum(!is.na(tot.mig))
cov.mig
p_migration <- ggplot(data[data$name=="f_migrationRatesSkyline",]) +
geom_point(aes(x=exp(true), y=median))+
geom_errorbar(aes(x=exp(true), ymin=lower, ymax=upper), alpha=0.5)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
ylab("estimated") + xlab("true") + ggtitle("migration rates") + theme_minimal()+
theme(legend.position="none")
plot(p_migration)
tot.mig = data[data$name=="f_migrationRatesSkyline","lower"]<data[data$name=="f_migrationRatesSkyline","true"] &
data[data$name=="f_migrationRatesSkyline","upper"]>data[data$name=="f_migrationRatesSkyline","true"]
tot.mig
data
tot.mig = data[data$name=="f_migrationRatesSkyline","lower"]<exp(data[data$name=="f_migrationRatesSkyline","true"]) &
data[data$name=="f_migrationRatesSkyline","upper"]>exp(data[data$name=="f_migrationRatesSkyline","true"])
cov.mig = sum(tot.mig[!is.na(tot.mig)])/sum(!is.na(tot.mig))
cov.mig
p_ne <- ggplot(data[data$name=="NeNull",]) +
geom_point(aes(x=true, y=median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true")+
ggtitle(paste("log(present Ne) (cov =", round(cov.ne, 2), ")")) +
theme_minimal()+
theme(legend.position="none")
plot(p_ne)
p_growth <- ggplot(data[data$name=="GrowthRate",]) +
geom_point(aes(x=true, y=-median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=-lower, ymax=-upper), alpha=0.5)+
ylab("estimated") + xlab("true") + + theme_minimal()+
ggtitle(paste("Growth rate (cov =", round(cov.growth, 2), ")")) +
theme(legend.position="none")
p_growth <- ggplot(data[data$name=="GrowthRate",]) +
geom_point(aes(x=true, y=-median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=-lower, ymax=-upper), alpha=0.5)+
ylab("estimated") + xlab("true") + + theme_minimal()+
ggtitle(paste("Growth rate (cov =", round(cov.growth, 2), ")")) +
theme(legend.position="none")
p_growth <- ggplot(data[data$name=="GrowthRate",]) +
geom_point(aes(x=true, y=-median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=-lower, ymax=-upper), alpha=0.5)+
ylab("estimated") + xlab("true") + theme_minimal()+
ggtitle(paste("Growth rate (cov =", round(cov.growth, 2), ")")) +
theme(legend.position="none")
plot(p_growth)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R")
tot.ne = data[data$name=="NeNull","lower"]<data[data$name=="NeNull","true"] &
data[data$name=="NeNull","upper"]>data[data$name=="NeNull","true"]
cov.ne = sum(tot.ne[!is.na(tot.ne)])/sum(!is.na(tot.ne))
tot.growth = data[data$name=="GrowthRate","lower"]<-1*data[data$name=="GrowthRate","true"] &
data[data$name=="GrowthRate","upper"]>-1*data[data$name=="GrowthRate","true"]
cov.growth = sum(tot.growth[!is.na(tot.growth)])/sum(!is.na(tot.growth))
tot.mig = data[data$name=="f_migrationRatesSkyline","lower"]<exp(data[data$name=="f_migrationRatesSkyline","true"]) &
data[data$name=="f_migrationRatesSkyline","upper"]>exp(data[data$name=="f_migrationRatesSkyline","true"])
cov.mig = sum(tot.mig[!is.na(tot.mig)])/sum(!is.na(tot.mig))
p_ne <- ggplot(data[data$name=="NeNull",]) +
geom_point(aes(x=true, y=median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true")+
ggtitle(paste("log(present Ne) (cov =", round(cov.ne, 2), ")")) +
theme_minimal()+
theme(legend.position="none")
plot(p_ne)
p_growth <- ggplot(data[data$name=="GrowthRate",]) +
geom_point(aes(x=true, y=-median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=-lower, ymax=-upper), alpha=0.5)+
ylab("estimated") + xlab("true") + theme_minimal()+
ggtitle(paste("Growth rate (cov =", round(cov.growth, 2), ")")) +
theme(legend.position="none")
plot(p_growth)
p_migration <- ggplot(data[data$name=="f_migrationRatesSkyline",]) +
geom_point(aes(x=exp(true), y=median))+
geom_errorbar(aes(x=exp(true), ymin=lower, ymax=upper), alpha=0.5)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
ylab("estimated") + xlab("true") +
ggtitle(paste("Migration Rates (cov =", round(cov.mig, 2), ")")) +
theme_minimal()+
theme(legend.position="none")
plot(p_migration)
p1 = ggarrange(p_ne, p_growth, p_migration, ncol = 3, labels = c("A", "B", "C"))
ggsave(plot=p1, filename = "../../../MascotSkyline-Text/Figures/exponential.pdf", height=4, width=10)
p_growth <- ggplot(data[data$name=="GrowthRate",]) +
geom_point(aes(x=true, y=-median))+
geom_abline(color="red") +
geom_errorbar(aes(x=true, ymin=-lower, ymax=-upper), alpha=0.5)+
ylab("estimated") + xlab("true") + theme_minimal()+
ggtitle(paste("Growth rate (cov =", round(cov.growth, 2), ")")) +
theme(legend.position="none")
plot(p_growth)
data[data$name=="GrowthRate",]
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R")
