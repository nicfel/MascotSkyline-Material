theme(legend.position="none")
plot(p_growth)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
plot(p_logit)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
log[i]
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
knitr::opts_chunk$set(echo = TRUE)
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
require(coda)
require(ape)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(grid)
library(lattice)
# read in meta data
SFS_metadata = read.table(file = paste(pathToAugurBuild, "/data/seattle_metadata.tsv", sep="/"), header=T, sep="\t")
# define main clades and others
main_clades = c("6b1.A/183P-5", "3c3.A")
# get the clade membership
SFS_metadata <- getClades("../results/clades_h1n1pdm_ha_1y.json", SFS_metadata, "h1n1pdm", main_clades)
SFS_metadata <- getClades("../results/clades_h3n2_ha_1y.json", SFS_metadata, "h3n2", main_clades)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata = setAgeGroups(SFS_metadata, age_groups, age_groups_lower, age_groups_upper)
SFS_metadata = setAgeGroups(SFS_metadata, age_groups, age_groups_lower, age_groups_upper)
SFS_metadata[which(SFS_metadata$flu_shot==""),"flu_shot"] = NA
# path to directory with h1n1 and h3n2 clusters
path_h1n1pdm = paste(pathToAugurBuild, "results/clusters/tree_h1n1pdm_genome_1y/", sep="/")
path_h3n2 = paste(pathToAugurBuild, "results/clusters/tree_h3n2_genome_1y", sep="/")
# reads in the newick files
trees_h1n1pdm = readInTrees(path_h1n1pdm)
trees_h3n2 = readInTrees(path_h3n2)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
#                            dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
is_h3n2= which(SFS_metadata$subtype=="h3n2")
is_h3n2
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, "h1n1pdm")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
#                            dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, "h1n1pdm")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
#                            dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, "h1n1pdm")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
View(SFS_metadata)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
distances_h3n2 = getDistances(path_h3n2, trees_h1n1pdm, SFS_metadata, is_h3n2)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
distances_h3n2 = getDistances(path_h3n2, trees_h1n1pdm, SFS_metadata, "h3n2")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
distances_h3n2 = getDistances(trees_h1n1pdm, SFS_metadata, "h3n2")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# initialize the distance matrices
distances_h1n1pdm = getDistances(trees_h1n1pdm, SFS_metadata, "h1n1pdm")
distances_h3n2 = getDistances(trees_h3n2, SFS_metadata, "h3n2")
# for each of the individuals, compute how long the branch is above it
trees = trees_h3n2
# compute pairwise distance
for (i in seq(1,length(trees))){
# get the pairwise distance between elements in the cluster
phylo_distances = ape::cophenetic.phylo(trees[[i]])
# get the tips in the current cluster
cluster_tips = colnames(phylo_distances)
# keeps track of which strains are in the SFS
is_SFS = logical()
# check which tips of the SFS they match to
for (j in seq(1, length(cluster_tips))){
is_SFS[[j]] = is.element(cluster_tips[[j]], SFS_metadata$strain)
}
# for all entries in is_SFS, fill the distance matrix
for (a in seq(1, length(is_SFS)-1)){
if (is_SFS[[a]]){
for (b in seq(a+1, length(is_SFS))){
if (is_SFS[[b]]){
distances[cluster_tips[[a]], cluster_tips[[b]]] = phylo_distances[a,b]
distances[cluster_tips[[b]], cluster_tips[[a]]] = phylo_distances[b,a]
}
}
}
}
}
View(phylo_distances)
trees[[1]]$edge.length
trees[[1]]$edge
trees[[i]]$tip.label[[j]]
trees[[i]]$tip.label[[10]]
# for each of the individuals, compute how long the branch is above it
trees = trees_h3n2
# compute pairwise distance
for (i in seq(1,length(trees))){
# check which tips of the SFS they match to
for (j in seq(1, length(trees[[i]]$tip.label))){
if(is.element(trees[[i]]$tip.label[[j]], SFS_metadata$strain)){
ind = which(trees[[i]]$tip.label[[j]]==SFS_metadata$strain)
# get the edge with that edge
print(trees[[i]]$edge.length[[which(trees[[i]]$edge[,2]==j)]])
}
}
# get the pairwise distance between elements in the cluster
phylo_distances = ape::cophenetic.phylo(trees[[i]])
# get the tips in the current cluster
cluster_tips = colnames(phylo_distances)
# keeps track of which strains are in the SFS
is_SFS = logical()
# for all entries in is_SFS, fill the distance matrix
for (a in seq(1, length(is_SFS)-1)){
if (is_SFS[[a]]){
for (b in seq(a+1, length(is_SFS))){
if (is_SFS[[b]]){
distances[cluster_tips[[a]], cluster_tips[[b]]] = phylo_distances[a,b]
distances[cluster_tips[[b]], cluster_tips[[a]]] = phylo_distances[b,a]
}
}
}
}
}
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
trees = trees_h3n2
# compute pairwise distance
for (i in seq(1,length(trees))){
# check which tips of the SFS they match to
for (j in seq(1, length(trees[[i]]$tip.label))){
if(is.element(trees[[i]]$tip.label[[j]], SFS_metadata$strain)){
ind = which(trees[[i]]$tip.label[[j]]==SFS_metadata$strain)
# get the edge with that edge
SFS_metadata[ind,"edgelength"] =(trees[[i]]$edge.length[[which(trees[[i]]$edge[,2]==j)]])
}
}
}
View(SFS_metadata)
SFS_metadata[,"edgelength"]
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2 SFS_metadata)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) +geom_histogram(aes(x=edgelength, color=subtype), stat="count")
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) +geom_histogram(aes(x=edgelength, color=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) +geom_density(aes(x=edgelength, color=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) + geom_histogramm(aes(x=edgelength, group=subtype, fill=subtype), stat="count")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, group=subtype, fill=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$edgelength = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata)
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata)
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),binomval] = 1
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=0.0001),"binomval"] = 0
getBinomReg(SFS_metadata, age_group)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=0.0001),"binomval"] = 0
getBinomReg(SFS_metadata, age_group)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=0.0001),"binomval"] = 0
getBinomReg(SFS_metadata, age_group)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
geom_distances = ggplot(data=SFS_metadata) + geom_histogram(aes(x=edgelength, color=subtype, fill=subtype), stat="count")
plot(geom_distances)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=0.0001),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<0.0001),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=0.0001),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0001
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0002
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0003
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0004
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0005
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0006
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0007
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
cutoff = 0.0008
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0002
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0003
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0004
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, c("True", "False")) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomRegVaccination(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# for each of the individuals, compute how long the branch is above it
SFS_metadata$h1_edge = NA
SFS_metadata$h3_edge = NA
SFS_metadata = getEdgeLengths(trees_h1n1pdm, SFS_metadata, "h1_edge")
SFS_metadata = getEdgeLengths(trees_h3n2, SFS_metadata, "h3_edge")
cutoff = 0.0001
# for either h1n1 or h3n2, compute the probability of a member from an age group is more
# or less likely to have an edge above its tip that has a length smaller than the cutoff
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h1_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h1_edge>=cutoff),"binomval"] = 0
p_h1_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H1N1")
plot(p_h1_edge)
SFS_metadata$binomval = NA
SFS_metadata[which(SFS_metadata$h3_edge<cutoff),"binomval"] = 1
SFS_metadata[which(SFS_metadata$h3_edge>=cutoff),"binomval"] = 0
p_h3_edge = getBinomReg(SFS_metadata, age_group) + ggtitle("H3N2")
plot(p_h3_edge)
