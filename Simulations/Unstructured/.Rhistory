}
age
which(age>=age_groups_lower && age<age_groups_upper)
which(age>=age_groups_lower & age<age_groups_upper)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
SFS_metadata[i,age_group] = age_group(which(age>=age_groups_lower & age<age_groups_upper))
}
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
SFS_metadata[i,"age_group"] = age_group(which(age>=age_groups_lower & age<age_groups_upper))
}
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
age
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
if (is.numeric(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
if (is.numeric(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
age
is.numeric(age)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
p <- ggplot(data=neigbours, aes(x=clade, y=neighbours, color=subtype)) +
geom_point()+
stat_summary(family="Negative binomial")+
ggtitle("number of other people that are close in the transmission history")
plot(p)
age
SFS_metadata
View(SFS_metadata)
x = glm(SFS_metadata$clade ~ SFS_metadata$age_group, family=binomial(link="logit"))
glm(SFS_metadata$clade ~ SFS_metadata$age_group, family=binomial(link="logit"))
x = multinom(clade ~ age_group, data = SFS_metadata)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(clade ~ age_group, data = SFS_metadata)
summary(x)
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown"),]
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(clade ~ age_group, data = SFS_metadata)
summary(x)
View(SFS_metadata)
View(SFS_analysis_data)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata$age_group = "unknown"
# assign age groups to strains
for (i in seq(1,length(SFS_metadata$strain))){
age = as.numeric(gsub("y", "",SFS_metadata[i,"age"]))
if (!is.na(age)){
SFS_metadata[i,"age_group"] = age_group[which(age>=age_groups_lower & age<age_groups_upper)]
}
}
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & SFS_metadata$subtype=="h3n2"),]
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
x = multinom(clade ~ age_group, data = SFS_metadata)
p <- ggplot(data=neigbours, aes(x=clade, y=neighbours, color=subtype)) +
geom_point()+
stat_summary(family="Negative binomial")+
ggtitle("number of other people that are close in the transmission history")
plot(p)
summary(x)
SFS_metadata[which(SFS_metadata$age_group!="unknown" & SFS_metadata$subtype=="h3n2"),]
SFS_analysis_data = SFS_metadata[which(SFS_metadata$age_group!="unknown" & SFS_metadata$h3n2),]
x = multinom(clade ~ age_group, data = SFS_analysis_data)
summary(x)
x = multinom(age_group ~ clade , data = SFS_analysis_data)
summary(x)
summary(x)$coefficients
summary(x)$coefficients["elderly", ]
exp(summary(x)$coefficients["elderly", ])
sum(exp(summary(x)$coefficients["elderly", ]))
sum(summary(x)$coefficients["elderly", ])
sum(summary(x)$coefficients["elderly", ])
mean(summary(x)$coefficients["elderly", ])
anova(x)
coef(x)
knitr::opts_chunk$set(echo = TRUE)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$h1n1pdm)
knitr::opts_chunk$set(echo = TRUE)
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions_patterns.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$h1n1pdm)
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
require(coda)
require(ape)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(grid)
library(lattice)
# read in meta data
SFS_metadata = read.table(file = paste(pathToAugurBuild, "/data/seattle_metadata.tsv", sep="/"), header=T, sep="\t")
# define main clades and others
main_clades = c("6b1.A/183P-5", "3c3.A")
# get the clade membership
SFS_metadata <- getClades("../results/clades_h1n1pdm_ha_1y.json", SFS_metadata, "h1n1pdm", main_clades)
SFS_metadata <- getClades("../results/clades_h3n2_ha_1y.json", SFS_metadata, "h3n2", main_clades)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata = setAgeGroups(SFS_metadata, age_groups, age_groups_lower, age_groups_upper)
SFS_metadata = setAgeGroups(SFS_metadata, age_groups, age_groups_lower, age_groups_upper)
SFS_metadata[which(SFS_metadata$flu_shot==""),"flu_shot"] = NA
# path to directory with h1n1 and h3n2 clusters
path_h1n1pdm = "../results/clusters/tree_h1n1pdm_genome_1y/"
path_h3n2 = "../results/clusters/tree_h3n2_genome_1y"
# reads in the newick files
trees_h1n1pdm = readInTrees(path_h1n1pdm)
trees_h3n2 = readInTrees(path_h3n2)
# path to directory with h1n1 and h3n2 clusters
path_h1n1pdm = paste(pathToAugurBuild, "results/clusters/tree_h1n1pdm_genome_1y/", sep="/")
path_h3n2 = paste(pathToAugurBuild, "../results/clusters/tree_h3n2_genome_1y", sep="/")
# reads in the newick files
trees_h1n1pdm = readInTrees(path_h1n1pdm)
trees_h3n2 = readInTrees(path_h3n2)
# path to directory with h1n1 and h3n2 clusters
path_h1n1pdm = paste(pathToAugurBuild, "results/clusters/tree_h1n1pdm_genome_1y/", sep="/")
path_h3n2 = paste(pathToAugurBuild, "results/clusters/tree_h3n2_genome_1y", sep="/")
# reads in the newick files
trees_h1n1pdm = readInTrees(path_h1n1pdm)
trees_h3n2 = readInTrees(path_h3n2)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$h1n1pdm)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype="h1n1pdm")
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$h3n2)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(cluster_files_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
require(coda)
require(ape)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(grid)
library(lattice)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(cluster_files_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
require(coda)
require(ape)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(grid)
library(lattice)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(cluster_files_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
# read in meta data
SFS_metadata = read.table(file = paste(pathToAugurBuild, "/data/seattle_metadata.tsv", sep="/"), header=T, sep="\t")
# define main clades and others
main_clades = c("6b1.A/183P-5", "3c3.A")
# get the clade membership
SFS_metadata <- getClades("../results/clades_h1n1pdm_ha_1y.json", SFS_metadata, "h1n1pdm", main_clades)
SFS_metadata <- getClades("../results/clades_h3n2_ha_1y.json", SFS_metadata, "h3n2", main_clades)
# define bounds of the age groups
age_groups_lower = c(0,7,18,65)
age_groups_upper = c(7,18,65,1000)
age_group = c("preschool", "school", "adult", "elderly")
SFS_metadata = setAgeGroups(SFS_metadata, age_groups, age_groups_lower, age_groups_upper)
SFS_metadata = setAgeGroups(SFS_metadata, age_groups, age_groups_lower, age_groups_upper)
SFS_metadata[which(SFS_metadata$flu_shot==""),"flu_shot"] = NA
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
trees_h1n1pdm
is_is_h1n1pdm
is_h1n1pdm
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
require(coda)
require(ape)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(grid)
library(lattice)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
pathToAugurBuild = "/Users/nmueller/Documents/github/augur-build/"
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
require(coda)
require(ape)
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
library(gridExtra)
library(grid)
library(lattice)
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
is_h1n1pdm
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
source(paste(pathToAugurBuild, "analyses-nicola/helper_functions.R", sep="/"))
# get which entries are sequenced
is_h1n1pdm = which(SFS_metadata$subtype=="h1n1pdm")
is_h3n2= which(SFS_metadata$subtype=="h3n2")
distances_h1n1pdm = matrix(rep(NA, length(is_h1n1pdm)*length(is_h1n1pdm)), nrow = length(is_h1n1pdm),
dimnames = list(as.character(SFS_metadata[is_h1n1pdm,"strain"]), as.character(SFS_metadata[is_h1n1pdm,"strain"])))
# initialize the distance matrices
distances_h1n1pdm = getDistances(path_h1n1pdm, trees_h1n1pdm, SFS_metadata, is_h1n1pdm)
distances_h3n2 = getDistances(path_h3n2, trees_h1n1pdm, SFS_metadata, is_h3n2)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 1.5, yend = 1.5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
scale_x_log10(limits=c(0.01,5))+
scale_y_log10(limits=c(0.01,5))+
theme(legend.position="none")
plot(p_growth)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 1.5, yend = 1.5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
# scale_x_log10(limits=c(0.01,5))+
# scale_y_log10(limits=c(0.01,5))+
theme(legend.position="none")
plot(p_growth)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 1.5, yend = 1.5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
scale_x_log10()+
scale_y_log10()+
theme(legend.position="none")
plot(p_growth)
p_growth <- ggplot()+
geom_point(data=mig, aes(x=true, y=median))+
geom_segment(data=mig, aes(x = 0, y = 0, xend = 5, yend = 5), color="red") +
geom_errorbar(data=mig, aes(x=true, ymin=lower, ymax=upper), alpha=0.5)+
ylab("estimated") + xlab("true") + ggtitle("migration rates") +
scale_x_log10(limits=c(0.01,5))+
scale_y_log10(limits=c(0.01,5))+
theme(legend.position="none")
plot(p_growth)
plot(p_ne)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
# plot the skyline graphs
Ne_plot = Ne[which(Ne$runnr<12 & Ne$runnr>0),]
p_skyline <- ggplot(data=Ne_plot)+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper,fill=state, group=state, alpha=0.2))+
geom_line(aes(x=time, y=median,color=state, group=state, linetype = "median estimate"))+
geom_line(aes(x=time, y=true,color=state, group=state, linetype = "true value"))+
facet_wrap(runnr~., ncol=5) +
ylab("log Ne") +
xlab("time") +
theme(legend.position="none",
strip.background = element_blank(),
strip.text.x = element_blank()
) +
theme_minimal()
plot(p_skyline)
source('~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotScalers.R', echo=TRUE)
p_skyline <- ggplot(data=Ne_plot)+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper,fill=state, group=state), alpha=0.2)+
geom_line(aes(x=time, y=median,color=state, group=state, linetype = "median estimate"))+
geom_line(aes(x=time, y=true,color=state, group=state, linetype = "true value"))+
facet_wrap(runnr~., ncol=5) +
ylab("log Ne") +
xlab("time") +
theme(legend.position="none",
strip.background = element_blank(),
strip.text.x = element_blank()
) +
theme_minimal()
plot(p_skyline)
source('~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R', echo=TRUE)
