strip.text.x = element_blank()
) +
theme_minimal()  +
scale_color_OkabeIto()+
scale_fill_OkabeIto() +
coord_cartesian(ylim=c(-4,8))
plot(p_skyline)
p_skyline <- ggplot(data=data[data$name=="SkylineNe" & data$run<20,], aes(x=time, color=state, fill=state, group=state))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2,color=NA)+
geom_line(aes(y=median,linetype = "median estimate"))+
geom_line(data=incidence[incidence$run<20,], aes(x=time, y=log(y/100), linetype = "true value", color=state))+
facet_wrap(run~., ncol=5) +
ylab("log Ne") +
xlab("time") +
theme(legend.position="none",
strip.background = element_blank(),
strip.text.x = element_blank()
) +
theme_minimal()  +
scale_color_OkabeIto()+
scale_fill_OkabeIto() +
coord_cartesian(ylim=c(-4,8))
plot(p_skyline)
p_skyline <- ggplot(data=data[data$name=="SkylineNe" & data$run<20,], aes(x=time, color=state, fill=state, group=state))+
geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.2,color=NA)+
geom_line(aes(y=median,linetype = "median estimate"))+
geom_line(data=incidence[incidence$run<20,], aes(x=time, y=log(y/50), linetype = "true value", color=state))+
facet_wrap(run~., ncol=5) +
ylab("log Ne") +
xlab("time") +
theme(legend.position="none",
strip.background = element_blank(),
strip.text.x = element_blank()
) +
theme_minimal()  +
scale_color_OkabeIto()+
scale_fill_OkabeIto() +
coord_cartesian(ylim=c(-4,8))
plot(p_skyline)
ggsave(plot=p_migration, file="../../../MascotSkyline-Text/Figures/migrationrates.pdf", width = 9, height=6)
p_migration <- ggplot(mig) +
geom_point(aes(x=true, y=median, color=method))+
geom_errorbar(aes(x=true, ymin=lower, ymax=upper, color=method), alpha=0.25)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
geom_smooth(aes(x=true, y=median, color=method, fill=method), method="lm")+
stat_cor(aes(x=true, y=median, color=method, fill=method, label = ..r.label..), label.x = -1.5, p.accuracy = 0.01, r.accuracy = 0.01)+
facet_grid(sampling~.)+
coord_cartesian(xlim=c(0.01,50), ylim=c(0.01,50))+
ylab("estimated") + xlab("true") + theme_minimal() +
scale_color_OkabeIto()+
scale_fill_OkabeIto()
plot(p_migration)
ggsave(plot=p_migration, file="../../../MascotSkyline-Text/Figures/migrationrates.pdf", width = 9, height=6)
p_migration <- ggplot(mig) +
geom_point(aes(x=true, y=median, color=method))+
geom_errorbar(aes(x=true, ymin=lower, ymax=upper, color=method), alpha=0.25)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
geom_smooth(aes(x=true, y=median, color=method, fill=method), method="lm")+
stat_cor(aes(x=true, y=median, color=method, fill=method, label = ..r.label..), label.x = -1.5, p.accuracy = 0.01, r.accuracy = 0.01)+
facet_grid(sampling~., scales="free")+
# coord_cartesian(xlim=c(0.01,50), ylim=c(0.01,50))+
ylab("estimated") + xlab("true") + theme_minimal() +
scale_color_OkabeIto()+
scale_fill_OkabeIto()
plot(p_migration)
p_migration <- ggplot(mig) +
geom_point(aes(x=true, y=median, color=method))+
geom_errorbar(aes(x=true, ymin=lower, ymax=upper, color=method), alpha=0.25)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
geom_smooth(aes(x=true, y=median, color=method, fill=method), method="lm")+
stat_cor(aes(x=true, y=median, color=method, fill=method, label = ..r.label..), label.x = -1.5, p.accuracy = 0.01, r.accuracy = 0.01)+
facet_grid(sampling~.)+
coord_cartesian(xlim=c(0.01,100), ylim=c(0.01,100))+
ylab("estimated") + xlab("true") + theme_minimal() +
scale_color_OkabeIto()+
scale_fill_OkabeIto()
plot(p_migration)
ggsave(plot=p_migration, file="../../../MascotSkyline-Text/Figures/migrationrates.pdf", width = 9, height=6)
truetrees <- list.files(path="../master", pattern=".*.single.tree", full.names = TRUE)
truetrees <- list.files(path="../master", pattern=".*.single*.tree", full.names = TRUE)
truetrees <- list.files(path="../master", pattern="*single*.tree", full.names = TRUE)
truetrees <- list.files(path="../master", pattern="*single.tree", full.names = TRUE)
truetrees <- list.files(path="../master", pattern="*.single.tree", full.names = TRUE)
truetrees <- list.files(path="./master", pattern="*.single.tree", full.names = TRUE)
trees2 = read.beast(truetrees[[i]])
trees = read.beast(truetrees[[i]])
trees
edges = trees[[tr]]@phylo$edge
nodes = as.numeric(trees[[tr]]@data$node)
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
trees
trees@data$location
for (i in seq(1, length(truetrees))){
trees = read.beast(truetrees[[i]])
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
events = 0;
for (i in seq(1, length(edges[,1]))){
parent_edge = which(edges[,2]==edges[i,1])
if (length(parent_edge)==1){
from = which(nodes==edges[i,1])
to = which(nodes==edges[i,2])
print(paste( trees@data$location[from],trees@data$location[to]))
if (trees@data$location[from]!=trees@data$location[to]){
events=events+1
}
}
}
}
truetrees <- list.files(path="./master", pattern="*.single.tree", full.names = TRUE)
for (i in seq(1, length(truetrees))){
trees = read.beast(truetrees[[i]])
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
events = 0;
for (i in seq(1, length(edges[,1]))){
parent_edge = which(edges[,2]==edges[i,1])
if (length(parent_edge)==1){
from = which(nodes==edges[i,1])
to = which(nodes==edges[i,2])
print(paste( trees@data$location[from],trees@data$location[to]))
if (trees@data$location[from]!=trees@data$location[to]){
print("lal")
events=events+1
}
}
}
}
truetrees <- list.files(path="./master", pattern="*.single.tree", full.names = TRUE)
for (i in seq(1, length(truetrees))){
trees = read.beast(truetrees[[i]])
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
events = 0;
for (i in seq(1, length(edges[,1]))){
parent_edge = which(edges[,2]==edges[i,1])
if (length(parent_edge)==1){
from = which(nodes==edges[i,1])
to = which(nodes==edges[i,2])
print(paste( trees@data$location[from],trees@data$location[to]))
if (trees@data$location[from]!=trees@data$location[to]){
print("lal")
events=events+1
}
}
}
dsa
}
truetrees[[i]]
truetrees[[1]]
events
tmp = strsplit(truetrees[[tr]], split="_")
for (tr in seq(1, length(truetrees))){
trees = read.beast(truetrees[[tr]])
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
tmp = strsplit(truetrees[[tr]], split="_")
tmp = strsplit(tmp[[1]][2], split="S")
runnumber = as.numeric(tmp[[1]][2])
if (runnumber>50){
sampling="higher migration"
}else{
sampling="lower migration"
}
events = 0;
for (i in seq(1, length(edges[,1]))){
parent_edge = which(edges[,2]==edges[i,1])
if (length(parent_edge)==1){
from = which(nodes==edges[i,1])
to = which(nodes==edges[i,2])
print(paste( trees@data$location[from],trees@data$location[to]))
if (trees@data$location[from]!=trees@data$location[to]){
print("lal")
events=events+1
}
}
}
dsa
}
runnumber
truemig = data.frame()
for (tr in seq(1, length(truetrees))){
trees = read.beast(truetrees[[tr]])
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
tmp = strsplit(truetrees[[tr]], split="_")
tmp = strsplit(tmp[[1]][2], split="S")
runnumber = as.numeric(tmp[[1]][2])
if (runnumber>50){
sampling="higher migration"
}else{
sampling="lower migration"
}
events = 0;
for (i in seq(1, length(edges[,1]))){
parent_edge = which(edges[,2]==edges[i,1])
if (length(parent_edge)==1){
from = which(nodes==edges[i,1])
to = which(nodes==edges[i,2])
if (trees@data$location[from]!=trees@data$location[to]){
events=events+1
}
}
}
truemig = rbind(truemig, data.frame(events=events, tips = length(trees@phylo$tip.label)))
}
truemig
truetrees <- list.files(path="./master", pattern="*.single.tree", full.names = TRUE)
truemig = data.frame()
for (tr in seq(1, length(truetrees))){
print(i)
trees = read.beast(truetrees[[tr]])
edges = trees@phylo$edge
nodes = as.numeric(trees@data$node)
tmp = strsplit(truetrees[[tr]], split="_")
tmp = strsplit(tmp[[1]][2], split="S")
runnumber = as.numeric(tmp[[1]][2])
if (runnumber>50){
sampling="higher migration"
}else{
sampling="lower migration"
}
events = 0;
for (i in seq(1, length(edges[,1]))){
parent_edge = which(edges[,2]==edges[i,1])
if (length(parent_edge)==1){
from = which(nodes==edges[i,1])
to = which(nodes==edges[i,2])
if (trees@data$location[from]!=trees@data$location[to]){
events=events+1
}
}
}
truemig = rbind(truemig, data.frame(events=events, tips = length(trees@phylo$tip.label), sampling=sampling))
}
truemig
val=truemig[truemig$sampling=="higher migration"]
sampls = unique(mig$sampling)
sampls
sampls = unique(mig$sampling)
for (i in seq(1, length(sampls))){
ratio = truemig[truemig$samplings==sampls[[i]], "events" ]/truemig[truemig$samplings==sampls[[i]], "tips" ]
}
ratio
truemig[truemig$samplings==sampls[[i]], "events" ]/truemig[truemig$samplings==sampls[[i]], "tips" ]
truemig[truemig$samplings==sampls[[i]], "events" ]
truemig[truemig$samplings==sampls[[i]], ]
sampls
truemig$samplings
ratio = truemig[truemig$sampling==sampls[[i]], "events" ]/truemig[truemig$sampling==sampls[[i]], "tips" ]
raio
ratio
ratio = mean(truemig[truemig$sampling==sampls[[i]], "events" ]/truemig[truemig$sampling==sampls[[i]], "tips" ])
ratio
sampls
sampls = unique(mig$sampling)
for (i in seq(1, length(sampls))){
ratio = mean(truemig[truemig$sampling==sampls[[i]], "events" ]/truemig[truemig$sampling==sampls[[i]], "tips" ])
print(ratio)
}
sampls = unique(mig$sampling)
for (i in seq(1, length(sampls))){
ratio = mean(truemig[truemig$sampling==sampls[[i]], "events" ]/truemig[truemig$sampling==sampls[[i]], "tips" ])
mig[mig$sampling==sampls[[i]], "sampling"] = paste(sampls[[i]], "\n(",ratio, "migration event per tip)", sep="")
print(ratio)
}
p_migration <- ggplot(mig) +
geom_point(aes(x=true, y=median, color=method))+
geom_errorbar(aes(x=true, ymin=lower, ymax=upper, color=method), alpha=0.25)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
geom_smooth(aes(x=true, y=median, color=method, fill=method), method="lm")+
stat_cor(aes(x=true, y=median, color=method, fill=method, label = ..r.label..), label.x = -1.5, p.accuracy = 0.01, r.accuracy = 0.01)+
facet_grid(sampling~.)+
coord_cartesian(xlim=c(0.01,100), ylim=c(0.01,100))+
ylab("estimated") + xlab("true") + theme_minimal() +
scale_color_OkabeIto()+
scale_fill_OkabeIto()
plot(p_migration)
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
rand
p_migration <- ggplot(mig[sample(1:nrow(mig)), ]) +
geom_point(aes(x=true, y=median, color=method))+
geom_errorbar(aes(x=true, ymin=lower, ymax=upper, color=method), alpha=0.25)+
scale_x_log10()+
scale_y_log10()+
geom_abline(color="red") +
geom_smooth(aes(x=true, y=median, color=method, fill=method), method="lm")+
stat_cor(aes(x=true, y=median, color=method, fill=method, label = ..r.label..), label.x = -1.5, p.accuracy = 0.01, r.accuracy = 0.01)+
facet_grid(facet~.)+
coord_cartesian(xlim=c(0.01,100), ylim=c(0.01,100))+
ylab("estimated") + xlab("true") + theme_minimal() +
scale_color_OkabeIto()+
scale_fill_OkabeIto()
plot(p_migration)
source("~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R")
p1 = ggarrange(p_ne, p_growth, p_migration, ncol = 3, labels = c("A", "B", "C"))
plot(p1)
ggsave(plot=p1, filename = "../../../MascotSkyline-Text/Figures/exponential.pdf", height=4, width=10)
source("~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotLogistic.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotLogistic.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotLogistic.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/Skygrid/plotSkygrid.R")
ggsave(plot=p_migration,paste("../../Figures/skygrid_mgiration.pdf", sep=""),width=5, height=4)
ggsave(plot=p_migration,paste("../../../MascotSkyline-Text/Figures/skygrid_mgiration.pdf", sep=""),width=5, height=4)
ggsave(plot=p_skyline,paste("../../../MascotSkyline-Text/Figures/skygrid_trends.pdf", sep=""),width=9, height=4.5)
source("~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
ggtree(tree)
ggtree(trees)
ggtree(trees, aes(color=location))+
)
ggtree(trees, aes(color=location))
ggtree(trees, aes(color=location))+scale_color_OkabeIto()
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
p.trees = ggarrange(plots, ncol = 5)
p.trees = ggarrange(plots[[1]],plots[[2]],plots[[3]], ncol = 5)
plot(p.trees)
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
p.trees = ggarrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]],plots[[5]],
plots[[6]],plots[[7]],plots[[8]],plots[[9]],plots[[10]], ncol = 5, labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"))
plot(p.trees)
plot(p.trees)
p.trees = ggarrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]],plots[[5]], ncol = 5, labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"))
plot(p.trees)
p.trees1 = ggarrange(plots[[1]],plots[[2]],plots[[3]],plots[[4]],plots[[5]], ncol = 5, labels = c("F", "G", "H", "I", "J"))
p.trees2 = ggarrange(plots[[6]],plots[[7]],plots[[8]],plots[[9]],plots[[10]], ncol = 5, labels = c("F", "G", "H", "I", "J"))
p.trees = ggarrange(p.trees1, p.trees2, ncol=1)
plot(p.trees)
ggsave(plot=p.trees, file="../../../MascotSkyline-Text/Figures/trees.pdf", width = 9, height=6)
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
ggsave(plot=p.trees, file="../../../MascotSkyline-Text/Figures/SIR_trees.pdf", width = 9, height=6)
truemig
support = read.table("nodesupport.tsv", header=T, sep="\t")
support
support$mig=c()
support
support$run
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
support
ggplot(support) + geom_point(aes(x=ratio, y=support, color=method))
ggplot(support) + geom_point(aes(x=ratio, y=support, color=method)) +scale_x_log10()
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support) + geom_point(aes(x=ratio, y=support, color=method)) +scale_x_log10()
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support) + geom_point(aes(x=ratio, y=support, color=method)) +scale_x_log10()
ggplot(support, aes(x=ratio, y=support, color=method)) + geom_point() +scale_x_log10() +geom_smooth()
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support, aes(x=ratio, y=support, color=method)) + geom_point() +scale_x_log10() +geom_smooth()
ggplot(support, aes(x=ratio, y=root, color=method)) + geom_point() +scale_x_log10() +geom_smooth()
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support, aes(x=ratio, y=root, color=method)) + geom_point() +scale_x_log10() +geom_smooth()
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support, aes(x=ratio, y=support, color=method)) + geom_point() +scale_x_log10() +geom_smooth()
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
for (i in seq(1, length(support$method))){
ind = which(truemig$run==support[i, "run"])
support[i, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support, aes(x=method, y=support, color=method)) + geom_density(alpha=0.1)
View(support)
ggplot(support, aes(y=support, color=method)) + geom_density(alpha=0.1)
ggplot(support, aes(x=support, color=method)) + geom_density(alpha=0.1)
ggplot(support, aes(x=support, fill=method)) + geom_density(alpha=0.1)
ggplot(support, aes(x=support, fill=method, color=method)) + geom_density() + scale_y_log10()
ggplot(support, aes(x=support, fill=method, color=method)) + geom_density(alpha=0.1) + scale_y_log10()
=uni_runs = unique(support[i, "run"])
uni_runs = unique(support[i, "run"])
uni_runs
support[i, "run"]
uni_runs = unique(support$run)
uni_runs
support = read.table("nodesupport.tsv", header=T, sep="\t")
support$ratio=c()
uni_runs = unique(support$run)
for (i in seq(1, length(uni_runs))){
ind = which(truemig$run==uni_runs[[i]])
ind2 = which(support$run==uni_runs[[i]])
support[ind2, "ratio"] = truemig[ind, "events"]/truemig[ind, "tips"]
}
ggplot(support, aes(x=ratio, y=support, color=method)) +
geom_point(alpha=0.1) +scale_x_log10() +geom_smooth()
ggplot(support, aes(x=ratio, y=support, color=method)) +
geom_bin2d() +scale_x_log10() +geom_smooth()+facet_grid(method~.)
ggplot(support, aes(x=ratio, y=support)) +
geom_bin2d() +scale_x_log10() +geom_smooth()+facet_grid(method~.)
ggplot(support, aes(x=ratio, y=support)) +
geom_density_2d() +scale_x_log10() +geom_smooth()+facet_grid(method~.)
ggplot(support, aes(x=ratio, y=support)) +
geom_bin2d() +scale_x_log10() +facet_grid(method~.)+theme_minimal()
ggplot(support, aes(x=ratio, y=support)) +
geom_point(alpa=0.1) +scale_x_log10() +facet_grid(method~.)+theme_minimal()
ggplot(support, aes(x=ratio, y=support)) +
geom_point(alpha=0.1) +scale_x_log10() +facet_grid(method~.)+theme_minimal()
ggplot(support, aes(x=support, fill=method, color=method)) + geom_density(alpha=0.1) + scale_y_log10()
ggplot(support, aes(x=support, color=method)) + geom_density(alpha=0.1) + scale_y_log10()
ggplot(support, aes(x=support, color=method)) + geom_histogram(alpha=0.1) + scale_y_log10()
ggplot(support, aes(x=support, color=method)) + geom_histogram(alpha=0.1) + facet_grid(method~.)
ggplot(support, aes(x=support, color=method)) + geom_histogram() + facet_grid(method~.) +theme_minimal()
ggplot(support, aes(x=support, fill=method)) + geom_histogram() + facet_grid(method~.) +theme_minimal()
ggplot(support, aes(x=support, fill=method)) + geom_histogram(alpha=0.6, position = 'identity') + facet_grid(method~.) +theme_minimal()
ggplot(support, aes(x=support, fill=method)) + geom_histogram(alpha=0.6, position = 'identity') + theme_minimal()
ggplot(support, aes(x=support, fill=method)) + geom_histogram(alpha=0.6, position = 'identity') + theme_minimal() + scale_y_log10()
ggplot(support, aes(x=support, fill=method)) + geom_histogram(alpha=0.4, position = 'identity') + theme_minimal() + scale_y_log10()
ggplot(support, aes(x=support, fill=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto()
ggplot(support, aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto()
ggplot(support, aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio>0.6, ], aes(x=ratio, y=support)) +
geom_point(alpha=0.1) +scale_x_log10() +facet_grid(method~.)+theme_minimal()
ggplot(support[support$ratio>0.6, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio>0.8, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio>1, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio<0.1, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio<0.2, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio<0.3, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
ggplot(support[support$ratio>0.6, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() +
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
source("~/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
support$sampling="lower migration"
support[support$run>50, "sampling"]="higher migration"
p.density = ggplot(support[support$ratio>0.6, ], aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() + facet_grid(facet~.)+
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
plot(p.density)
p.density = ggplot(support, aes(x=support, fill=method, color=method)) + geom_histogram(alpha=0.4, position = 'identity') +
theme_minimal() + scale_y_log10() + facet_grid(sampling~.)+
scale_fill_OkabeIto() +  scale_color_OkabeIto() +xlab("posterior support for true node location") + ylab("count")
plot(p.density)
ggsave(plot=p.density, file="../../../MascotSkyline-Text/Figures/SIR_nodesupport.pdf", width = 9, height=6)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
library(colorblindr)
install.packages(colorblindr)
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
remotes::install_github("clauswilke/colorblindr")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
library(ggtree)
library(treeio)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
install.packages(ggarrange)
library(ggpubr)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/plotSIR.R")
