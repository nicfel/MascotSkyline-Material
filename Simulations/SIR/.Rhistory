param_index = which(params$run==runnumber)
param_index = param_index[length(param_index)]
last_time = truemig[which(truemig$run==runnumber), "rootTime"]
# loop over the Ne0's if the the run number is x01 x02 x03 x04 x05 (take modulo 100)
if (runnumber%%100<6 & runnumber%%100>0){
for (j in seq(1, length(jsondat$I))){
for (k in seq(1, 26)){
name = paste("SkylineNe.state", j-1, ".", k, sep="")
mean = mean(t[,name])
median = mean(t[,name])
hpd = HPDinterval(as.mcmc(t[,name]))
value_name = strsplit(name, split="\\.")[[1]][[1]]
data = rbind(data, data.frame(time=(last_time+t$Tree.height[1]) - (k-1)/25*t$Tree.height[1], name = value_name, mean=mean, median=median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
state=paste("state", j-1, sep=""),
run=runnumber))
}
}
}
# loop over the Ne0's
for (j in seq(7,8)){
val_mean = mean(t[,param_labels[j]])
val_median = median(t[,param_labels[j]])
hpd = HPDinterval(as.mcmc(t[,param_labels[j]]))
value_name = strsplit(param_labels[j], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[j]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[5]])) +1]]
mig = rbind(mig, data.frame(true=true, mean=val_mean, median=val_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[j], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[j], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
run=runnumber, method="MASCOT-Skyline"))
}
ratio_mean = mean(t[,param_labels[7]]/t[,param_labels[8]])
ratio_median = median(t[,param_labels[7]]/t[,param_labels[8]])
hpd = HPDinterval(as.mcmc(t[,param_labels[7]]/t[,param_labels[8]]))
value_name = strsplit(param_labels[7], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[7]]/params[param_index, param_labels[8]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[7], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[8], split="[._]")[[1]][[5]])) +1]]
mean_vals = (t[,param_labels[7]]+t[,param_labels[8]])/2
mean_hpd = HPDinterval(as.mcmc(mean_vals))
before = length(ratio$true)
ratio = rbind(ratio, data.frame(true=true, mean=ratio_mean, median=ratio_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[7], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[8], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
mean_mean = mean(mean_vals),
mean_median = median(mean_vals),
mean_lower = mean_hpd[1,"lower"],
mean_upper = mean_hpd[1,"upper"],
true_mean = (params[param_index, param_labels[7]]+params[param_index, param_labels[8]])/2,
run=runnumber, method="MASCOT-Skyline"))
if (length(ratio$true)+1!=ratio$true){
das
}
}
}
}
data = data.frame()
mig = data.frame()
ratio=data.frame()
# Read In Data ---------------------------------
for (i in seq(1,length(log),1)){
print(i)
# Make the filenames for all the three runs
filename1 <- paste(log[i], sep="")
# Read in the SISCO *.logs
t1 <- read.table(filename1, header=TRUE, sep="\t")
t1 <- t1[-seq(1,ceiling(length(t1$Sample)/2)), ]
t=t1
# t = rbind(t1, t2, t3)
# calculate ess values
if (length(t$posterior)>20){
ess <- effectiveSize(t)
if (min(ess[2:3])<50){
print(sprintf("ESS value is %f for file %s",min(ess[2:3]),filename1))
}else{
dfname <- data.frame(filename = filename1)
# get the number of the run
tmp = strsplit(filename1, split="_")
tmp = strsplit(tmp[[1]][2], split="S")
runnumber = as.numeric(tmp[[1]][2])
require("rjson")
last_time = 0
jsondat <- fromJSON(file=gsub("1mascot.log","master.json", gsub("../out/","./master/",log[[i]])))
tot_incidence = c()
times = jsondat$t
for (j in seq(1, length(jsondat$I))){
if (runnumber%%100<6 & runnumber%%100>0){
incidence = rbind(incidence, data.frame(time=times, y=jsondat$I[[j]],
state=paste("state", j-1, sep=""),
run=runnumber))
}
tot_incidence = c(tot_incidence, sum(diff(jsondat$I[[j]])==1))
}
param_index = which(params$run==runnumber)
param_index = param_index[length(param_index)]
last_time = truemig[which(truemig$run==runnumber), "rootTime"]
# loop over the Ne0's if the the run number is x01 x02 x03 x04 x05 (take modulo 100)
if (runnumber%%100<6 & runnumber%%100>0){
for (j in seq(1, length(jsondat$I))){
for (k in seq(1, 26)){
name = paste("SkylineNe.state", j-1, ".", k, sep="")
mean = mean(t[,name])
median = mean(t[,name])
hpd = HPDinterval(as.mcmc(t[,name]))
value_name = strsplit(name, split="\\.")[[1]][[1]]
data = rbind(data, data.frame(time=(last_time+t$Tree.height[1]) - (k-1)/25*t$Tree.height[1], name = value_name, mean=mean, median=median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
state=paste("state", j-1, sep=""),
run=runnumber))
}
}
}
# loop over the Ne0's
for (j in seq(7,8)){
val_mean = mean(t[,param_labels[j]])
val_median = median(t[,param_labels[j]])
hpd = HPDinterval(as.mcmc(t[,param_labels[j]]))
value_name = strsplit(param_labels[j], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[j]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[5]])) +1]]
mig = rbind(mig, data.frame(true=true, mean=val_mean, median=val_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[j], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[j], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
run=runnumber, method="MASCOT-Skyline"))
}
ratio_mean = mean(t[,param_labels[7]]/t[,param_labels[8]])
ratio_median = median(t[,param_labels[7]]/t[,param_labels[8]])
hpd = HPDinterval(as.mcmc(t[,param_labels[7]]/t[,param_labels[8]]))
value_name = strsplit(param_labels[7], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[7]]/params[param_index, param_labels[8]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[7], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[8], split="[._]")[[1]][[5]])) +1]]
mean_vals = (t[,param_labels[7]]+t[,param_labels[8]])/2
mean_hpd = HPDinterval(as.mcmc(mean_vals))
before = length(ratio$true)
ratio = rbind(ratio, data.frame(true=true, mean=ratio_mean, median=ratio_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[7], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[8], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
mean_mean = mean(mean_vals),
mean_median = median(mean_vals),
mean_lower = mean_hpd[1,"lower"],
mean_upper = mean_hpd[1,"upper"],
true_mean = (params[param_index, param_labels[7]]+params[param_index, param_labels[8]])/2,
run=runnumber, method="MASCOT-Skyline"))
if (length(ratio$true)!=before+1){
das
}
}
}
}
data = data.frame()
mig = data.frame()
ratio=data.frame()
# Read In Data ---------------------------------
for (i in seq(1,length(log),1)){
print(i)
# Make the filenames for all the three runs
filename1 <- paste(log[i], sep="")
# Read in the SISCO *.logs
t1 <- read.table(filename1, header=TRUE, sep="\t")
t1 <- t1[-seq(1,ceiling(length(t1$Sample)/2)), ]
t=t1
# t = rbind(t1, t2, t3)
# calculate ess values
if (length(t$posterior)>20){
ess <- effectiveSize(t)
if (min(ess[2:3])<50){
print(sprintf("ESS value is %f for file %s",min(ess[2:3]),filename1))
}else{
dfname <- data.frame(filename = filename1)
# get the number of the run
tmp = strsplit(filename1, split="_")
tmp = strsplit(tmp[[1]][2], split="S")
runnumber = as.numeric(tmp[[1]][2])
require("rjson")
last_time = 0
jsondat <- fromJSON(file=gsub("1mascot.log","master.json", gsub("../out/","./master/",log[[i]])))
tot_incidence = c()
times = jsondat$t
for (j in seq(1, length(jsondat$I))){
if (runnumber%%100<6 & runnumber%%100>0){
incidence = rbind(incidence, data.frame(time=times, y=jsondat$I[[j]],
state=paste("state", j-1, sep=""),
run=runnumber))
}
tot_incidence = c(tot_incidence, sum(diff(jsondat$I[[j]])==1))
}
param_index = which(params$run==runnumber)
param_index = param_index[length(param_index)]
last_time = truemig[which(truemig$run==runnumber), "rootTime"]
# loop over the Ne0's if the the run number is x01 x02 x03 x04 x05 (take modulo 100)
if (runnumber%%100<6 & runnumber%%100>0){
for (j in seq(1, length(jsondat$I))){
for (k in seq(1, 26)){
name = paste("SkylineNe.state", j-1, ".", k, sep="")
mean = mean(t[,name])
median = mean(t[,name])
hpd = HPDinterval(as.mcmc(t[,name]))
value_name = strsplit(name, split="\\.")[[1]][[1]]
data = rbind(data, data.frame(time=(last_time+t$Tree.height[1]) - (k-1)/25*t$Tree.height[1], name = value_name, mean=mean, median=median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
state=paste("state", j-1, sep=""),
run=runnumber))
}
}
}
# loop over the Ne0's
for (j in seq(7,8)){
val_mean = mean(t[,param_labels[j]])
val_median = median(t[,param_labels[j]])
hpd = HPDinterval(as.mcmc(t[,param_labels[j]]))
value_name = strsplit(param_labels[j], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[j]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[5]])) +1]]
mig = rbind(mig, data.frame(true=true, mean=val_mean, median=val_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[j], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[j], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
run=runnumber, method="MASCOT-Skyline"))
}
ratio_mean = mean(t[,param_labels[7]]/t[,param_labels[8]])
ratio_median = median(t[,param_labels[7]]/t[,param_labels[8]])
hpd = HPDinterval(as.mcmc(t[,param_labels[7]]/t[,param_labels[8]]))
value_name = strsplit(param_labels[7], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[7]]/params[param_index, param_labels[8]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[7], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[8], split="[._]")[[1]][[5]])) +1]]
mean_vals = (t[,param_labels[7]]+t[,param_labels[8]])/2
mean_hpd = HPDinterval(as.mcmc(mean_vals))
before = length(ratio$true)
ratio = rbind(ratio, data.frame(true=true, mean=ratio_mean, median=ratio_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[7], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[8], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
mean_mean = mean(mean_vals),
mean_median = median(mean_vals),
mean_lower = mean_hpd[1,"lower"],
mean_upper = mean_hpd[1,"upper"],
true_mean = (params[param_index, param_labels[7]]+params[param_index, param_labels[8]])/2,
run=runnumber, method="MASCOT-Skyline"))
if (length(ratio$true)!=before+1){
das
}
}
}
}
data = data.frame()
mig = data.frame()
ratio=data.frame()
# Read In Data ---------------------------------
for (i in seq(1,length(log),1)){
print(i)
# Make the filenames for all the three runs
filename1 <- paste(log[i], sep="")
# Read in the SISCO *.logs
t1 <- read.table(filename1, header=TRUE, sep="\t")
t1 <- t1[-seq(1,ceiling(length(t1$Sample)/2)), ]
t=t1
# t = rbind(t1, t2, t3)
# calculate ess values
if (length(t$posterior)>20){
ess <- effectiveSize(t)
if (min(ess[2:3])<50){
print(sprintf("ESS value is %f for file %s",min(ess[2:3]),filename1))
}else{
dfname <- data.frame(filename = filename1)
# get the number of the run
tmp = strsplit(filename1, split="_")
tmp = strsplit(tmp[[1]][2], split="S")
runnumber = as.numeric(tmp[[1]][2])
require("rjson")
last_time = 0
jsondat <- fromJSON(file=gsub("1mascot.log","master.json", gsub("../out/","./master/",log[[i]])))
tot_incidence = c()
times = jsondat$t
for (j in seq(1, length(jsondat$I))){
if (runnumber%%100<6 & runnumber%%100>0){
incidence = rbind(incidence, data.frame(time=times, y=jsondat$I[[j]],
state=paste("state", j-1, sep=""),
run=runnumber))
}
tot_incidence = c(tot_incidence, sum(diff(jsondat$I[[j]])==1))
}
param_index = which(params$run==runnumber)
param_index = param_index[length(param_index)]
last_time = truemig[which(truemig$run==runnumber), "rootTime"]
# loop over the Ne0's if the the run number is x01 x02 x03 x04 x05 (take modulo 100)
if (runnumber%%100<6 & runnumber%%100>0){
for (j in seq(1, length(jsondat$I))){
for (k in seq(1, 26)){
name = paste("SkylineNe.state", j-1, ".", k, sep="")
mean = mean(t[,name])
median = mean(t[,name])
hpd = HPDinterval(as.mcmc(t[,name]))
value_name = strsplit(name, split="\\.")[[1]][[1]]
data = rbind(data, data.frame(time=(last_time+t$Tree.height[1]) - (k-1)/25*t$Tree.height[1], name = value_name, mean=mean, median=median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
state=paste("state", j-1, sep=""),
run=runnumber))
}
}
}
# loop over the Ne0's
for (j in seq(7,8)){
val_mean = mean(t[,param_labels[j]])
val_median = median(t[,param_labels[j]])
hpd = HPDinterval(as.mcmc(t[,param_labels[j]]))
value_name = strsplit(param_labels[j], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[j]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[j], split="[._]")[[1]][[5]])) +1]]
mig = rbind(mig, data.frame(true=true, mean=val_mean, median=val_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[j], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[j], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
run=runnumber, method="MASCOT-Skyline"))
}
ratio_mean = mean(t[,param_labels[7]]/t[,param_labels[8]])
ratio_median = median(t[,param_labels[7]]/t[,param_labels[8]])
hpd = HPDinterval(as.mcmc(t[,param_labels[7]]/t[,param_labels[8]]))
value_name = strsplit(param_labels[7], split="\\.")[[1]][[1]]
true=params[param_index, param_labels[7]]/params[param_index, param_labels[8]]
from_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[7], split="[._]")[[1]][[3]])) +1]]
to_cp = tot_incidence[[as.numeric(gsub("state","",strsplit(param_labels[8], split="[._]")[[1]][[5]])) +1]]
mean_vals = (t[,param_labels[7]]+t[,param_labels[8]])/2
mean_hpd = HPDinterval(as.mcmc(mean_vals))
before = length(ratio$true)
ratio = rbind(ratio, data.frame(true=true, mean=ratio_mean, median=ratio_median,
lower=hpd[1,"lower"], upper=hpd[1,"upper"],
from_state=strsplit(param_labels[7], split="[._]")[[1]][[3]],
to_state = strsplit(param_labels[8], split="[._]")[[1]][[5]],
from_cp = from_cp,
to_cp = to_cp,
mean_mean = mean(mean_vals),
mean_median = median(mean_vals),
mean_lower = mean_hpd[1,"lower"],
mean_upper = mean_hpd[1,"upper"],
true_mean = (params[param_index, param_labels[7]]+params[param_index, param_labels[8]])/2,
run=runnumber, method="MASCOT-Skyline"))
if (length(ratio$true)!=before+1){
das
}
}
}
}
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
trees
tree = read.beast(truetrees[[tr]]) # read in the tree file
tree@data$location
tree@data$reaction
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
tree@data$reactiontimes1
times1
trees@data$reaction
length(trees@data$reaction)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
times0
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
selected0
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
plot(p)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
selected0
truetrees
trees@data
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
trees$@phylotip.label[-keep]
prunedTree = drop.tip(trees@phylo, trees$@phylo$tip.label[-keep])
prunedTree = drop.tip(trees@phylo, trees@phylo$tip.label[-keep])
prunedTree
ggtree(prunedTree)
trees@phylo$tip.label[-keep]
length(trees@phylo$tip.label[-keep])
length(keep)
keep
trees@data$node
trees@data$node[keep]
trees@phylo$tip.label
nodeNr
keep
nodeNr = as.numeric(trees@data$node[keep])
# prune the tree to only keep the tips
prunedTree = drop.tip(trees@phylo, trees@phylo$tip.label[-keep])
ggtree(prunedTree)
nodeNr
trees@phylo$tip.label
trees@phylo$tip.label[-keep]
trees@phylo$tip.label[-keep]
trees@phylo$tip.label[-nodeNr]
nodeNr
prunedTree = drop.tip(trees@phylo, trees@phylo$tip.label[nodeNr])
ggtree(prunedTree)
prunedTree
lengtH(trees@phylo$tip.label[nodeNr])
length(trees@phylo$tip.label[nodeNr])
length(trees@phylo$tip.label[-nodeNr])
prunedTree = drop.tip(trees, trees@phylo$tip.label[-nodeNr])
nodeNr
trees@phylo
trees@phylo$tip.label
trees@phylo$tip.label[nodeNr]
trees@phylo$tip.label[nodeNr]
nodeNr = as.numeric(trees@data$node[keep])
nodeNr
trees@phylo$tip.label[-nodeNr]
pruned_tree <- drop.tip(trees@phylo, trees@phylo$tip.label[nodeNr])
pruned_tree
pruned_tree <- drop.tip(trees@phylo, trees@phylo$tip.label[-nodeNr])
pruned_tree
# get the names of the tips
nodeNr = as.numeric(trees@data$node[keep])
# prune the tree to only keep the tips
pruned_tree <- drop.tip(trees@phylo, trees@phylo$tip.label[nodeNr])
# Update the trait data
pruned_traits <- trees$data[-which(row.names(trees$data) %in% trees@phylo$tip.label[nodeNr]), ]
# get the names of the tips
nodeNr = as.numeric(trees@data$node[keep])
# prune the tree to only keep the tips
pruned_tree <- drop.tip(trees@phylo, trees@phylo$tip.label[nodeNr])
# Update the trait data
pruned_traits <- trees$data[-which(row.names(trees$data) %in% trees@phylo$tip.label[nodeNr]), ]
trees@phylo
trees@phylo$tip.label
trees@phylo$tip.label[nodeNr]
pruned_traits <- trees$data[-which(row.names(trees$data) %in% pruned_tree@data), ]
pruned_traits
pruned_tree
tips_to_remove <- setdiff(trees@phylo$tip.label, trees@phylo$tip.label[keep])
pruned_tree <- drop.tip(trees@phylo, tips_to_remove)
pruned_tree
trees@phylo$tip.label[keep]
unique(trees@phylo$tip.label[keep])
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
tmp
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
pruned_tree
length(keep)
length(unique(keep))
length(tips_to_remove)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
trees@data$node[keep]
tips_to_remove <- setdiff(trees@phylo$tip.label, trees@phylo$tip.label[as.numeric(trees@data$node[keep])])
tips_to_remove
lengtH(tips_to_remove)
length(tips_to_remove)
# Prune the tree
pruned_tree <- drop.tip(trees@phylo, tips_to_remove)
pruned_tree
ggtree(pruned_tree)
ggtree(trees)
trees@phylo
install.packages("phyloch")
yremotes::install_github("fmichonneau/phyloch")
remotes::install_github("fmichonneau/phyloch")
pruned_tree <- drop.tip2(trees@phylo, tips_to_remove)
library("phyloch")
# Prune the tree
pruned_tree <- drop.tip2(trees@phylo, tips_to_remove)
pruned_tree
pruned_tree <- drop.tip2(trees, tips_to_remove)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
tips_to_remove <- setdiff(trees@phylo$tip.label, trees@phylo$tip.label[as.numeric(trees@data$node[keep])])
trees
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
truetrees[[tr]]
trees = read.beast(truetrees[[tr]]) # read in the tree file
library(ape)
library(treeio)
source("~/Library/CloudStorage/OneDrive-FredHutchinsonCancerCenter/Documents/github/MascotSkyline-Material/Simulations/SIR/getEvenSampling.R")
