geom_line(data=nr_intros, aes(x=nr_samples-1, y = nr_intros, color="observed"))+
theme_minimal()+
scale_y_log10()+
ylab("Probability that new sample reveals new introduction") +
xlab("Number of samples") +
scale_color_manual(name="percentage of cases\ndue to introductions",
values=c("1"="#F9C988", "3"="#71BD89", "10"="#24A897", "observed"=both_clades_col))
plot(g.nrintros)
ggsave(plot=g.nrintros, file=paste(path, 'figures/intro_clustersampling.png', sep='/'), height=4,width=7)
sims_intros$intro_percentage
g.nrintros = ggplot() +
geom_line(data = sims_intros, aes(x=nr_samples, y = intro_prob, group=interaction(run, intro_percentage), color = intro_percentage))+
geom_line(data=nr_intros, aes(x=nr_samples-1, y = nr_intros, color="observed"))+
theme_minimal()+
scale_y_log10()+
ylab("Probability that new sample reveals new introduction") +g.nrintros = ggplot() +
geom_line(data = sims_intros, aes(x=nr_samples, y = intro_prob, group=interaction(run, intro_percentage), color = intro_percentage))+
geom_line(data=nr_intros, aes(x=nr_samples-1, y = nr_intros, color="observed"))+
theme_minimal()+
scale_y_log10()+
ylab("Probability that new sample reveals new introduction") +
xlab("Number of samples") +
scale_color_manual(name="percentage of cases\ndue to introductions", labels=c("1","3","10","observed"),
values=c("1"="#F9C988", "3"="#71BD89", "10"="#24A897", "observed"=both_clades_col))
plot(g.nrintros)
ggsave(plot=g.nrintros, file=paste(path, 'figures/intro_clustersampling.png', sep='/'), height=4,width=7)
\
xlab("Number of samples") +
scale_color_manual(name="percentage of cases\ndue to introductions", labels=c("1","3","10","observed")
values=c("1"="#F9C988", "3"="#71BD89", "10"="#24A897", "observed"=both_clades_col))
plot(g.nrintros)
g.nrintros = ggplot() +
geom_line(data = sims_intros, aes(x=nr_samples, y = intro_prob, group=interaction(run, intro_percentage), color = intro_percentage))+
geom_line(data=nr_intros, aes(x=nr_samples-1, y = nr_intros, color="observed"))+
theme_minimal()+
scale_y_log10()+
ylab("Probability that new sample reveals new introduction") +
xlab("Number of samples") +
scale_color_manual(name="percentage of cases\ndue to introductions", labels=c("1","3","10","observed"),
values=c("1"="#F9C988", "3"="#71BD89", "10"="#24A897", "observed"=both_clades_col))
plot(g.nrintros)
ggsave(plot=g.nrintros, file=paste(path, 'figures/intro_clustersampling.png', sep='/'), height=4,width=7)
g.nrintros = ggplot() +
geom_line(data = sims_intros, aes(x=nr_samples, y = intro_prob, group=interaction(run, intro_percentage), color = intro_percentage))+
geom_line(data=nr_intros, aes(x=nr_samples-1, y = nr_intros, color="observed"))+
theme_minimal()+
scale_y_log10()+
ylab("Probability that new sample reveals new introduction") +
xlab("Number of samples") +
scale_color_manual(name="percentage of cases\ndue to introductions", breaks=c("1","3","10","observed"),
values=c("1"="#F9C988", "3"="#71BD89", "10"="#24A897", "observed"=both_clades_col))
plot(g.nrintros)
ggsave(plot=g.nrintros, file=paste(path, 'figures/intro_clustersampling.png', sep='/'), height=4,width=7)
mrsi = data.frame()
for (rep in seq(0,8)){
mrsi.t=read.table(paste(path, "/simulations/eir_", rep, ".tsv", sep=""), sep="\t")
mrsi.t$date = as.Date(mrsi.t$V2)
max.date = max(mrsi.t[mrsi.t$date<=as.Date("2020-07-01"), "date"])
mrsi = rbind(mrsi, data.frame(filename=paste("simmulticoal_skygrowth_", rep,sep=""),date=max.date))
mrsi = rbind(mrsi, data.frame(filename=paste("simmultibd_skygrid_", rep,sep=""),date=max.date))
}
first = T
first.growth = T
first.intro = T
for (i in seq(1,length(mrsi$filename))){
time_diff = mrsi[i,"date"]-end_time
time = seq(0,as.numeric(time_diff),2)
# read in the log file
t = read.table(paste(path,'/simout/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
# take a 10% burnin
t = t[-seq(1,length(t$posterior)/5),]
ess = effectiveSize(as.mcmc(t$posterior))
if (ess[[1]]>100){
if (!startsWith( as.character(mrsi[i,"filename"]),"simmultibd")){
# read in all the Ne's
for (j in seq(1,length(time))){
method = strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[2]]
timeframe = as.numeric(strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[3]])
name = paste('Ne',j,sep="")
hpdInt = HPDinterval(exp(as.mcmc(t[,name])))
hpdInt.m = HPDinterval(exp(as.mcmc(t[,name])), prob=0.5)
new.dat = data.frame(time=mrsi[i,"date"]-time[j],
Ne.mean=median(exp(t[,name])), Ne.lower=hpdInt[1,'lower'], Ne.upper=hpdInt[1,'upper'],
Ne.ll=hpdInt.m[1,'lower'], Ne.uu=hpdInt.m[1,'upper'],
method = method, timeframe=timeframe)
if (first){
dat = new.dat
first = F
}else{
dat = rbind(dat, new.dat)
}
}
# get all the growth rates
average_over = 1
for (j in seq(1,length(time)-average_over,1)){
method = strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[2]]
timeframe = as.numeric(strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[3]])
name1 = paste('Ne',j,sep="")
name2 = paste('Ne',j+average_over,sep="")
values = (t[,name1]-t[,name2])/(time[j+average_over]-time[j])*365
doubling = log(2)/values
R = 1+values/becoming_uninf
R[which(R<=0)] = 0
hpdInt = HPDinterval(as.mcmc(values))
hpdInt.5 = HPDinterval(as.mcmc(values), prob=0.5)
hpdInt.doubling = HPDinterval(as.mcmc(doubling))
hpdInt.R = HPDinterval(as.mcmc(R))
hpdInt.R.5 = HPDinterval(as.mcmc(R), prob=0.5)
# get the percentage of intros
name.intro = paste('immigrationRate',floor((j-1)/7)+1,sep="")
values.intro = exp(t[,name.intro])
# get the approximate transmission rate from the growth rate
transmission = values + becoming_uninf
# assume that the minimal R0 is .5
transmission[which(transmission<becoming_uninf/2)] = becoming_uninf/2
# get the ratio of intros
ratio.intro = exp(t[,name.intro])/(exp(t[,name.intro]) + transmission)
hpd.intro = HPDinterval(as.mcmc(ratio.intro))
hpd.intro.5 = HPDinterval(as.mcmc(ratio.intro), prob=0.5)
new.dat = data.frame(time=mrsi[i,"date"]-time[j],
growth.mean=median(values), growth.lower=hpdInt[1,'lower'], growth.upper=hpdInt[1,'upper'],
growth.ll=hpdInt.5[1,'lower'], growth.uu=hpdInt.5[1,'upper'],
doubling.mean=median(doubling), doubling.lower=hpdInt.doubling[1,'lower'], doubling.upper=hpdInt.doubling[1,'upper'],
R.lower=hpdInt.R[1,'lower'], R.upper=hpdInt.R[1,'upper'],
R.ll=hpdInt.R.5[1,'lower'], R.uu=hpdInt.R.5[1,'upper'],
intro.l=hpd.intro[1,'lower'], intro.u=hpd.intro[1,'upper'],
intro.ll=hpd.intro.5[1,'lower'], intro.uu=hpd.intro.5[1,'upper'],
method = method, timeframe=timeframe)
new.dat = rbind(new.dat, data.frame(time=mrsi[i,"date"]-time[j+1] +0.01,
growth.mean=median(values), growth.lower=hpdInt[1,'lower'], growth.upper=hpdInt[1,'upper'],
growth.ll=hpdInt.5[1,'lower'], growth.uu=hpdInt.5[1,'upper'],
doubling.mean=median(doubling), doubling.lower=hpdInt.doubling[1,'lower'], doubling.upper=hpdInt.doubling[1,'upper'],
R.lower=hpdInt.R[1,'lower'], R.upper=hpdInt.R[1,'upper'],
R.ll=hpdInt.R.5[1,'lower'], R.uu=hpdInt.R.5[1,'upper'],
intro.l=hpd.intro[1,'lower'], intro.u=hpd.intro[1,'upper'],
intro.ll=hpd.intro.5[1,'lower'], intro.uu=hpd.intro.5[1,'upper'],
method = method, timeframe=timeframe))
if (first.growth){
growth = new.dat
first.growth = F
}else{
growth = rbind(growth, new.dat)
}
}
}
}else{
print("ess limit not reached")
print(ess)
}
}
levels(dat$method) <- c("correlated Ne's", "uncorrelated Ne's", "correlated Ne trajectories")
dat$method <- factor(dat$method, levels =c("correlated Ne's", "correlated Ne trajectories", "uncorrelated Ne's"))
levels(growth$method) <- c("correlated Ne's", "uncorrelated Ne's", "correlated Ne trajectories")
growth$method <- factor(growth$method, levels =c("correlated Ne's", "correlated Ne trajectories", "uncorrelated Ne's"))
# read in the mrsi file
first = T
for (i in seq(1,length(mrsi$filename))){
time_diff = mrsi[i,"date"]-end_time
time = seq(0,as.numeric(time_diff),2)
if (startsWith( as.character(mrsi[i,"filename"]),"simmultibd")){
# read in the log file
t = read.table(paste(path,'/simout/', mrsi[i,'filename'], '.log',sep=""), sep="\t", header=T)
# take a 10% burnin
t = t[-seq(1,length(t$posterior)/10),]
# read in all the Ne's
for (j in seq(1,length(time))){
method = strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[2]]
timeframe = as.numeric(strsplit(as.character(mrsi[i,'filename']), split="_")[[1]][[3]])
name = paste('logReproductiveNumber',length(time)-j+1,sep="")
# name2 = paste('samplingProportion',length(time)-j+1,sep="")
hpdInt = HPDinterval(exp(as.mcmc(t[,name])))
hpdInt.5 = HPDinterval(exp(as.mcmc(t[,name])),prob=0.5)
# hpdInt.samp = HPDinterval(as.mcmc(t[,name2]))
hpdInt.growth = HPDinterval(as.mcmc((exp(t[,name])-1)*becoming_uninf))
hpdInt.growth.5 = HPDinterval(as.mcmc((exp(t[,name])-1)*becoming_uninf),prob=0.5)
new.dat = data.frame(time=mrsi[i,"date"]-time[j],
Ne.mean=median(t[,name]), Ne.lower=hpdInt[1,'lower'], Ne.upper=hpdInt[1,'upper'],
Ne.ll=hpdInt.5[1,'lower'], Ne.uu=hpdInt.5[1,'upper'],
# samp.mean=median(t[,name2]), samp.lower=hpdInt.samp[1,'lower'], samp.upper=hpdInt.samp[1,'upper'],
growth.lower=hpdInt.growth[1,'lower'], growth.upper=hpdInt.growth[1,'upper'],
growth.ll=hpdInt.growth.5[1,'lower'], growth.uu=hpdInt.growth.5[1,'upper'],
method = method, timeframe=timeframe)
new.dat = rbind(new.dat, data.frame(time=mrsi[i,"date"]-time[j]-2+0.001,
Ne.mean=median(t[,name]), Ne.lower=hpdInt[1,'lower'], Ne.upper=hpdInt[1,'upper'],
Ne.ll=hpdInt.5[1,'lower'], Ne.uu=hpdInt.5[1,'upper'],
# samp.mean=median(t[,name2]), samp.lower=hpdInt.samp[1,'lower'], samp.upper=hpdInt.samp[1,'upper'],
growth.lower=hpdInt.growth[1,'lower'], growth.upper=hpdInt.growth[1,'upper'],
growth.ll=hpdInt.growth.5[1,'lower'], growth.uu=hpdInt.growth.5[1,'upper'],
method = method, timeframe=timeframe))
if (first){
dat.bdsky = new.dat
first = F
}else{
dat.bdsky = rbind(dat.bdsky, new.dat)
}
}
}
}
p_coal_growth_supp = ggplot(growth) +
geom_path(aes(x=time, y=growth.mean, color=timeframe)) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill=timeframe), alpha=0.2) +
# geom_path(data=growth.testing, aes(x=time, y=growth, color="testing")) +
facet_wrap(method~., ncol=1) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$ date)))  +
coord_cartesian(ylim=c(-150,300))+
scale_color_OkabeIto()+
scale_fill_OkabeIto()+
theme_minimal()
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth_supp <- p_coal_growth_supp + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days"))
# ggsave(plot=p_coal_growth_supp, file=paste(path, 'figures/coal_growth_supp.pdf', sep='/'), height=5,width=9)
p_coal_growth = ggplot(growth) +
# geom_line(aes(x=time, y=growth.mean, color="genetic data")) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="coalescent skyline"), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="coalescent skyline"), alpha=0.8) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="birth-death skyline"), alpha=0.2) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="birth-death skyline"), alpha=0.8) +
geom_path(data=growth.testing, aes(x=time, y=growth, color="confirmed positive tests")) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
coord_cartesian(ylim=c(-100,300))+
scale_color_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
scale_fill_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
xlab("")+
theme_minimal() +
facet_wrap(.~timeframe, ncol=3)
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth <- p_coal_growth + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days")) + ylab("growth rate per year")
plot(p_coal_growth)
ggsave(plot=p_coal_growth, file=paste(path, 'figures/sims_growth.png', sep='/'), height=9,width=15)
# p_coal_growth = ggplot(growth) +
#   geom_line(aes(x=time, y=growth.mean, group=timeframe))+
#   geom_line(data=growth.testing, aes(x=time, y=growth, group=timeframe, color=
#                   "red"))+
#
#   scale_x_date()  +
#
#   xlab("")+
#   theme_minimal()
# plot(p_coal_growth)
p_coal_growth_supp = ggplot(growth) +
geom_path(aes(x=time, y=growth.mean, color=timeframe)) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill=timeframe), alpha=0.2) +
# geom_path(data=growth.testing, aes(x=time, y=growth, color="testing")) +
facet_wrap(method~., ncol=1) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$ date)))  +
coord_cartesian(ylim=c(-150,300))+
scale_color_OkabeIto()+
scale_fill_OkabeIto()+
theme_minimal()
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth_supp <- p_coal_growth_supp + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days"))
# ggsave(plot=p_coal_growth_supp, file=paste(path, 'figures/coal_growth_supp.pdf', sep='/'), height=5,width=9)
p_coal_growth = ggplot(growth) +
# geom_line(aes(x=time, y=growth.mean, color="genetic data")) +
geom_ribbon(aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="coalescent skyline"), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="coalescent skyline"), alpha=0.8) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.lower, ymax=growth.upper, fill="birth-death skyline"), alpha=0.2) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=growth.ll, ymax=growth.uu, fill="birth-death skyline"), alpha=0.8) +
geom_path(data=growth.testing, aes(x=time, y=growth, color="confirmed positive tests")) +
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
coord_cartesian(ylim=c(-100,300))+
scale_color_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
scale_fill_manual(name="inference using:", values = c("confirmed positive tests"=test_col, "birth-death skyline"=bdsky_col, "coalescent skyline"=coal_col))+
xlab("")+
theme_minimal() +
facet_wrap(.~timeframe, ncol=3)
doubling_labels = c(-1,-2,-6,6,2,1)
p_coal_growth <- p_coal_growth + scale_y_continuous(sec.axis = sec_axis(~ .,breaks=round(log(2)/doubling_labels*365), labels=doubling_labels, name = "doubling times in days")) + ylab("growth rate per year")
plot(p_coal_growth)
ggsave(plot=p_coal_growth, file=paste(path, 'figures/sims_growth.png', sep='/'), height=9,width=15)
# p_coal_growth = ggplot(growth) +
#   geom_line(aes(x=time, y=growth.mean, group=timeframe))+
#   geom_line(data=growth.testing, aes(x=time, y=growth, group=timeframe, color=
#                   "red"))+
#
#   scale_x_date()  +
#
#   xlab("")+
#   theme_minimal()
# plot(p_coal_growth)
true_vals = data.frame(R0=c(2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.50, 2.39, 2.28, 2.17, 2.06, 1.94, 1.83, 1.72, 1.61, 1.50, 1.39, 1.28, 1.17, 1.06, 0.94, 0.83, 0.72, 0.61, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00))
true_vals$times = as.Date('2020-02-06') + seq(1,length(true_vals$R0)*2,2)
p_R0 = ggplot(growth) +
geom_ribbon(aes(x=time, ymin=R.lower, ymax=R.upper, fill="coalesent skyline"), alpha=0.2) +
geom_ribbon(aes(x=time, ymin=R.ll, ymax=R.uu, fill="coalesent skyline"), alpha=0.8) +
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=Ne.lower, ymax=Ne.upper, fill="birth-death skyline"), alpha=0.2)+
geom_ribbon(data=dat.bdsky, aes(x=time, ymin=Ne.ll, ymax=Ne.uu, fill="birth-death skyline"), alpha=0.8)+
geom_line(data=true_vals, aes(x=times, y=R0, color="simulated values"))+
ylab("Effective Reproduction Number")+
scale_x_date(limits=c(as.Date('2020-01-25'), max(mrsi$date)))  +
# coord_cartesian(ylim=c(0,7.5))+
# geom_vline(xintercept=as.Date('2020-03-05'))+
# geom_vline(xintercept=as.Date('2020-03-13'))+
# geom_vline(xintercept=as.Date('2020-03-23'))+
scale_color_manual(name="inference using:", values = c("simulated values"=test_col, "birth-death skyline"=bdsky_col, "coalesent skyline"=coal_col))+
scale_fill_manual(name="inference using:", values = c("simulated values"=test_col, "birth-death skyline"=bdsky_col, "coalesent skyline"=coal_col))+
theme_minimal() +
facet_wrap(.~timeframe, ncol=3)
plot(p_R0)
ggsave(plot=p_R0, file=paste(path, 'figures/sims_R0.png', sep='/'), height=9,width=15)
average_over = 1
for (rep in seq(0,8)){
intro_vals = introductions[which(introductions$timeframe==rep), ]
intro_vals$t = floor(intro_vals$t*366)
t.vals = unique(intro_vals$t)
for (i in seq(1,length(t.vals)-average_over)){
values = intro_vals[which(intro_vals$t>=t.vals[[i]] & intro_vals$t<t.vals[[i+average_over]]), "val"]
m = mean(values)
std = sd(values)
new.smooth_intro = data.frame(t=t.vals[[i]]+average_over/2 + end_time, y=m, err=std, timeframe=rep)
if (rep==0 && i==1){
smooth_intro = new.smooth_intro
}else{
smooth_intro = rbind(smooth_intro, new.smooth_intro)
}
}
}
g.perc_intros = ggplot(growth) +
geom_ribbon(aes(x=time, ymin=intro.l, ymax=intro.u), alpha=0.2, fill=coal_col)+
geom_ribbon(aes(x=time, ymin=intro.ll, ymax=intro.uu), alpha=0.8, fill=coal_col)+
geom_line(data=smooth_intro, aes(x=t,y=y))+
geom_ribbon(data=smooth_intro, aes(x=t,ymin=y-err,ymax=y+err))+
theme_minimal()+
scale_y_log10()+
scale_x_date()+
coord_cartesian(ylim = c(0.001, 1))+
ylab("Proportion of cases due to introductions") +
xlab("") +
facet_wrap(.~timeframe, ncol=3)
plot(g.perc_intros)
ggsave(plot=g.perc_intros, file=paste(path, 'figures/sim_intro_percentage.png', sep='/'), height=4,width=7)
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/IsolationWithMigration/Application/greatApes/combineRunsNew.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/clusterPlots.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/plotSynNonSyn.R', echo=TRUE)
install.packages("phangorn", dependencies=TRUE)
library(phangorn)    # load the phangorn library
read.nexus.networx
nrs = clusters[which(clusters$filename=="multicoal_skygrid_1"),]
# keeps track of the membership of samples
cluster_member = c()
for (i in seq(1,length(nrs$number))){
cluster_member = append(cluster_member, rep(nrs[i,"number"], nrs[i,"size"]))
}
first = T
for (i in seq(0,length(cluster_member)/3 - 1,10)){
nr_intros_samples = c()
for (r in seq(1,1000)){
y = sample(cluster_member, size=i+1, replace =F)
with_last = length(unique(y))
without_last = length(unique(head(y, -1)))
nr_intros_samples = append(nr_intros_samples, with_last-without_last)
}
# hpd = HPDinterval(as.mcmc(nr_intros_samples))
# hpd.5 = HPDinterval(as.mcmc(nr_intros_samples), prob=0.5)
new.dat = data.frame(nr_samples = i, nr_intros = mean(nr_intros_samples))
if (first){
nr_intros = new.dat
first = F;
}else{
nr_intros = rbind(nr_intros, new.dat)
}
}
# get the simulated values
sims_intros = read.table(paste(path,'/results/sim_cluster_size.tsv',sep="/"), sep="\t", header=T)
sims_intros$intro_percentage = as.character(sims_intros$intro_percentage*100)
sims_intros$intro_percentage = factor(sims_intros$intro_percentage, levels = c("1", "3", "10"))
g.nrintros = ggplot() +
geom_line(data = sims_intros, aes(x=nr_samples, y = intro_prob, group=interaction(run, intro_percentage), color = intro_percentage))+
geom_line(data=nr_intros, aes(x=nr_samples-1, y = nr_intros, color="observed"))+
theme_minimal()+
scale_y_log10()+
ylab("Probability that new sample reveals new introduction") +
xlab("Number of samples") +
scale_color_manual(name="percentage of cases\ndue to introductions", breaks=c("1","3","10","observed"),
values=c("1"="#F9C988", "3"="#71BD89", "10"="#24A897", "observed"=both_clades_col))
plot(g.nrintros)
ggsave(plot=g.nrintros, file=paste(path, 'figures/intro_clustersampling.png', sep='/'), height=4,width=7)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
source('~/Documents/github/hCoV-19_WA/scripts/WA_growth.R', echo=TRUE)
debugSource('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
debugSource('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R', echo=TRUE)
debugSource('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
for (s in seq(2,length(sample_numbers))){
system(paste("rm -r ", this.dir, "/combined/", sample_numbers[[s]], sep=""))
system(paste("mkdir ", this.dir, "/combined/", sample_numbers[[s]], sep=""))
system(paste("rm -r ", this.dir, "/unique/", sample_numbers[[s]], sep=""))
system(paste("mkdir ", this.dir, "/unique/", sample_numbers[[s]], sep=""))
trees <- list.files(path=paste(this.dir,"/out/", sample_numbers[[s]], "/", sep=""), pattern="*rep0.*\\.trees$", full.names = TRUE)
for (i in seq(1,length(trees))){
in_command <- " -b 50 -resample 100000 -log"
for (j in seq(0,2)){
in_command = paste(in_command, " ", gsub("rep0", paste("rep", j,sep=""), trees[i]), sep="")
}
out_command = gsub("rep0_", "", trees[i])
out_command = gsub("out", "combined", out_command)
combined_command = gsub(".trees",".trees", out_command)
combined_command = paste(" -o ", combined_command, sep="")
# combine the trees
system(paste("/Applications/BEAST\\ 2.6.3/bin/logcombiner", in_command, combined_command, "", sep=" "), intern=TRUE, show.output.on.console = F, ignore.stderr=T)
system(paste("/Applications/BEAST\\ 2.6.3/bin/logcombiner", gsub(".trees",".log", in_command), gsub(".trees",".log", combined_command), sep=" "), intern=TRUE, show.output.on.console = F, ignore.stderr=T)
in_file  = gsub("-o ","", combined_command)
out_file = gsub(" ", "", gsub("/combined/","/unique/", in_file))
system(paste("java -jar ", this.dir,  "/../../Software/AIMannotator.jar -burnin 0 -userank false ", in_file, " ", out_file, sep=""), intern=TRUE)
species_trees <- read.nexus(file=out_file,force.multi=T) # get all the tree topologies in the posterior
# compute total number of trees, only works if Minimal tree support for output was 0 in AIM ann
tot.trees = 0
for (j in seq(1, length(species_trees))){
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]]
tot.trees = tot.trees + as.numeric(post.occurance[[length(post.occurance)]])
}
print(i)
# plots the most likely species tree for each run
for (j in seq(1, min(1,length(species_trees)))){
plot_tree <- ladderize(species_trees[[j]], right=F) # ladderizes the tree (defines the node orderign on the x-axis for the plot)
pl <- plotSpeciesTree(out_file, names(species_trees)[[j]], plot_tree, posterior.threshold, BF.threshold, prior, forwards.arrows) # returns a ggplot object that can be modified
post.occurance = strsplit(names(species_trees)[[j]], split="_")[[1]] # get how often this ranked topology was observed in the posterior
pl <- pl +
ylab("substitutions per site") + # labels the y-axis
scale_size_continuous(range=c(0.1,1)) + # defines the range of arrow sizes
ggtitle(paste("posterior support = ", round(as.numeric(post.occurance[[length(post.occurance)]])/tot.trees,2), "", sep="")) + # specify the title
theme_minimal() + # changes the plotting theme
# coord_cartesian(xlim=c(2.5,8.5), ylim=c(0,0.015)) +
coord_cartesian(xlim=c(0,8.5), ylim=c(0,0.2)) +
scale_size_continuous(limits=c(0.5,1), range=c(0.1,1), breaks=c(0.5,0.75,1), name="posterior support\nfor gene flow")+
scale_y_continuous(sec.axis = sec_axis(~ ./(clock_rate), name="Years in Million"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
xlab("")
plot(pl)
p[[l_count]] = pl
l_count = l_count+1
}
}
}
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
source('~/Documents/github/IsolationWithMigration/Application/Gambia/combineRuns.R')
a='sdkljamlkaksdlk'
a[[2]]
a[1]
a[1][1]
a[1][2]
substr(a, i,i)
a='sdkljamlkaksdlk'
i = c(1,3,4,5)
substr(a, i,i)
b=substr(a, i,i)
substring(a, i,i)
substring(a, i,i) =substring(x, 1:4,1:4)
a='sdkljamlkaksdlk'
b='xxxx'
i = c(1,3,4,5)
substring(a, i,i) =substring(x, 1:4,1:4)
substring(a, i,i) =substring(b, 1:4,1:4)
a
substring(a, i,i)
substring(b, 1:4,1:4)
substring(a, i,i) =substring(b, 1:4,1:4)
substring(a, i,i) = b
a='sdkljamlkaksdlk'
b='xxxx'
i = c(1,3,4,5)
substring(a, i,i) = b
a='sdkljamlkaksdlk'
b= c('x','x','x','x')
i = c(1,3,4,5)
substring(a, i,i) = b
disp(x)
a='sdkljamlkaksdlk'
b= c('x','x','x','x')
i = c(1,3,4,5)
substring(a, i,i) = b
print(a)
a
a='sdkljamlkaksdlk'
b= c('x','y','z',':')
i = c(1,3,4,5)
substring(a, i,i) = b
print(a)
a='ooooooooooooooo'
b= c('x','y','z',':')
i = c(1,3,4,5)
substring(a, i,i) = b
print(a)
substring(a, 2,i)
substring(a, i,i) = b
source("~/Documents/github/MascotSkyline-Material/Simulations/Exponential/plotScalers.R")
source("~/Documents/github/MascotSkyline-Material/Simulations/Logistic/plotScalers.R")
